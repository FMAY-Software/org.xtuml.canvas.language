/**
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.canvas.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtuml.canvas.language.canvas.CanvasPackage;
import org.xtuml.canvas.language.canvas.FloatingText;
import org.xtuml.canvas.language.canvas.Rectangle;
import org.xtuml.canvas.language.canvas.Shape;
import org.xtuml.canvas.language.canvas.ShapeProps;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Shape</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.ShapeImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.ShapeImpl#getProps <em>Props</em>}</li>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.ShapeImpl#getRect <em>Rect</em>}</li>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.ShapeImpl#getText <em>Text</em>}</li>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.ShapeImpl#getRepresents <em>Represents</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ShapeImpl extends MinimalEObjectImpl.Container implements Shape
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getProps() <em>Props</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProps()
   * @generated
   * @ordered
   */
  protected ShapeProps props;

  /**
   * The cached value of the '{@link #getRect() <em>Rect</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRect()
   * @generated
   * @ordered
   */
  protected Rectangle rect;

  /**
   * The cached value of the '{@link #getText() <em>Text</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getText()
   * @generated
   * @ordered
   */
  protected FloatingText text;

  /**
   * The default value of the '{@link #getRepresents() <em>Represents</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRepresents()
   * @generated
   * @ordered
   */
  protected static final String REPRESENTS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRepresents() <em>Represents</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRepresents()
   * @generated
   * @ordered
   */
  protected String represents = REPRESENTS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ShapeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CanvasPackage.Literals.SHAPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.SHAPE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShapeProps getProps()
  {
    return props;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProps(ShapeProps newProps, NotificationChain msgs)
  {
    ShapeProps oldProps = props;
    props = newProps;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CanvasPackage.SHAPE__PROPS, oldProps, newProps);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProps(ShapeProps newProps)
  {
    if (newProps != props)
    {
      NotificationChain msgs = null;
      if (props != null)
        msgs = ((InternalEObject)props).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.SHAPE__PROPS, null, msgs);
      if (newProps != null)
        msgs = ((InternalEObject)newProps).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.SHAPE__PROPS, null, msgs);
      msgs = basicSetProps(newProps, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.SHAPE__PROPS, newProps, newProps));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rectangle getRect()
  {
    return rect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRect(Rectangle newRect, NotificationChain msgs)
  {
    Rectangle oldRect = rect;
    rect = newRect;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CanvasPackage.SHAPE__RECT, oldRect, newRect);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRect(Rectangle newRect)
  {
    if (newRect != rect)
    {
      NotificationChain msgs = null;
      if (rect != null)
        msgs = ((InternalEObject)rect).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.SHAPE__RECT, null, msgs);
      if (newRect != null)
        msgs = ((InternalEObject)newRect).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.SHAPE__RECT, null, msgs);
      msgs = basicSetRect(newRect, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.SHAPE__RECT, newRect, newRect));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FloatingText getText()
  {
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetText(FloatingText newText, NotificationChain msgs)
  {
    FloatingText oldText = text;
    text = newText;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CanvasPackage.SHAPE__TEXT, oldText, newText);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setText(FloatingText newText)
  {
    if (newText != text)
    {
      NotificationChain msgs = null;
      if (text != null)
        msgs = ((InternalEObject)text).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.SHAPE__TEXT, null, msgs);
      if (newText != null)
        msgs = ((InternalEObject)newText).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.SHAPE__TEXT, null, msgs);
      msgs = basicSetText(newText, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.SHAPE__TEXT, newText, newText));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRepresents()
  {
    return represents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRepresents(String newRepresents)
  {
    String oldRepresents = represents;
    represents = newRepresents;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.SHAPE__REPRESENTS, oldRepresents, represents));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CanvasPackage.SHAPE__PROPS:
        return basicSetProps(null, msgs);
      case CanvasPackage.SHAPE__RECT:
        return basicSetRect(null, msgs);
      case CanvasPackage.SHAPE__TEXT:
        return basicSetText(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CanvasPackage.SHAPE__NAME:
        return getName();
      case CanvasPackage.SHAPE__PROPS:
        return getProps();
      case CanvasPackage.SHAPE__RECT:
        return getRect();
      case CanvasPackage.SHAPE__TEXT:
        return getText();
      case CanvasPackage.SHAPE__REPRESENTS:
        return getRepresents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CanvasPackage.SHAPE__NAME:
        setName((String)newValue);
        return;
      case CanvasPackage.SHAPE__PROPS:
        setProps((ShapeProps)newValue);
        return;
      case CanvasPackage.SHAPE__RECT:
        setRect((Rectangle)newValue);
        return;
      case CanvasPackage.SHAPE__TEXT:
        setText((FloatingText)newValue);
        return;
      case CanvasPackage.SHAPE__REPRESENTS:
        setRepresents((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CanvasPackage.SHAPE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case CanvasPackage.SHAPE__PROPS:
        setProps((ShapeProps)null);
        return;
      case CanvasPackage.SHAPE__RECT:
        setRect((Rectangle)null);
        return;
      case CanvasPackage.SHAPE__TEXT:
        setText((FloatingText)null);
        return;
      case CanvasPackage.SHAPE__REPRESENTS:
        setRepresents(REPRESENTS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CanvasPackage.SHAPE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case CanvasPackage.SHAPE__PROPS:
        return props != null;
      case CanvasPackage.SHAPE__RECT:
        return rect != null;
      case CanvasPackage.SHAPE__TEXT:
        return text != null;
      case CanvasPackage.SHAPE__REPRESENTS:
        return REPRESENTS_EDEFAULT == null ? represents != null : !REPRESENTS_EDEFAULT.equals(represents);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", represents: ");
    result.append(represents);
    result.append(')');
    return result.toString();
  }

} //ShapeImpl
