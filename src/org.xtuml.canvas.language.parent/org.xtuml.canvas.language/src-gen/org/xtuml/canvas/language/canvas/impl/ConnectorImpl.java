/**
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.canvas.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtuml.canvas.language.canvas.Anchors;
import org.xtuml.canvas.language.canvas.CanvasPackage;
import org.xtuml.canvas.language.canvas.Connector;
import org.xtuml.canvas.language.canvas.FloatingTexts;
import org.xtuml.canvas.language.canvas.Polyline;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Connector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.ConnectorImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.ConnectorImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.ConnectorImpl#getRepresents <em>Represents</em>}</li>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.ConnectorImpl#getPolyline <em>Polyline</em>}</li>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.ConnectorImpl#getAnchors <em>Anchors</em>}</li>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.ConnectorImpl#getTexts <em>Texts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConnectorImpl extends MinimalEObjectImpl.Container implements Connector
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getRepresents() <em>Represents</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRepresents()
   * @generated
   * @ordered
   */
  protected static final String REPRESENTS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRepresents() <em>Represents</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRepresents()
   * @generated
   * @ordered
   */
  protected String represents = REPRESENTS_EDEFAULT;

  /**
   * The cached value of the '{@link #getPolyline() <em>Polyline</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPolyline()
   * @generated
   * @ordered
   */
  protected Polyline polyline;

  /**
   * The cached value of the '{@link #getAnchors() <em>Anchors</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnchors()
   * @generated
   * @ordered
   */
  protected Anchors anchors;

  /**
   * The cached value of the '{@link #getTexts() <em>Texts</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTexts()
   * @generated
   * @ordered
   */
  protected FloatingTexts texts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConnectorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CanvasPackage.Literals.CONNECTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.CONNECTOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.CONNECTOR__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRepresents()
  {
    return represents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRepresents(String newRepresents)
  {
    String oldRepresents = represents;
    represents = newRepresents;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.CONNECTOR__REPRESENTS, oldRepresents, represents));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Polyline getPolyline()
  {
    return polyline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPolyline(Polyline newPolyline, NotificationChain msgs)
  {
    Polyline oldPolyline = polyline;
    polyline = newPolyline;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CanvasPackage.CONNECTOR__POLYLINE, oldPolyline, newPolyline);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPolyline(Polyline newPolyline)
  {
    if (newPolyline != polyline)
    {
      NotificationChain msgs = null;
      if (polyline != null)
        msgs = ((InternalEObject)polyline).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.CONNECTOR__POLYLINE, null, msgs);
      if (newPolyline != null)
        msgs = ((InternalEObject)newPolyline).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.CONNECTOR__POLYLINE, null, msgs);
      msgs = basicSetPolyline(newPolyline, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.CONNECTOR__POLYLINE, newPolyline, newPolyline));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Anchors getAnchors()
  {
    return anchors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAnchors(Anchors newAnchors, NotificationChain msgs)
  {
    Anchors oldAnchors = anchors;
    anchors = newAnchors;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CanvasPackage.CONNECTOR__ANCHORS, oldAnchors, newAnchors);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAnchors(Anchors newAnchors)
  {
    if (newAnchors != anchors)
    {
      NotificationChain msgs = null;
      if (anchors != null)
        msgs = ((InternalEObject)anchors).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.CONNECTOR__ANCHORS, null, msgs);
      if (newAnchors != null)
        msgs = ((InternalEObject)newAnchors).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.CONNECTOR__ANCHORS, null, msgs);
      msgs = basicSetAnchors(newAnchors, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.CONNECTOR__ANCHORS, newAnchors, newAnchors));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FloatingTexts getTexts()
  {
    return texts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTexts(FloatingTexts newTexts, NotificationChain msgs)
  {
    FloatingTexts oldTexts = texts;
    texts = newTexts;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CanvasPackage.CONNECTOR__TEXTS, oldTexts, newTexts);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTexts(FloatingTexts newTexts)
  {
    if (newTexts != texts)
    {
      NotificationChain msgs = null;
      if (texts != null)
        msgs = ((InternalEObject)texts).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.CONNECTOR__TEXTS, null, msgs);
      if (newTexts != null)
        msgs = ((InternalEObject)newTexts).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.CONNECTOR__TEXTS, null, msgs);
      msgs = basicSetTexts(newTexts, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.CONNECTOR__TEXTS, newTexts, newTexts));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CanvasPackage.CONNECTOR__POLYLINE:
        return basicSetPolyline(null, msgs);
      case CanvasPackage.CONNECTOR__ANCHORS:
        return basicSetAnchors(null, msgs);
      case CanvasPackage.CONNECTOR__TEXTS:
        return basicSetTexts(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CanvasPackage.CONNECTOR__NAME:
        return getName();
      case CanvasPackage.CONNECTOR__TYPE:
        return getType();
      case CanvasPackage.CONNECTOR__REPRESENTS:
        return getRepresents();
      case CanvasPackage.CONNECTOR__POLYLINE:
        return getPolyline();
      case CanvasPackage.CONNECTOR__ANCHORS:
        return getAnchors();
      case CanvasPackage.CONNECTOR__TEXTS:
        return getTexts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CanvasPackage.CONNECTOR__NAME:
        setName((String)newValue);
        return;
      case CanvasPackage.CONNECTOR__TYPE:
        setType((String)newValue);
        return;
      case CanvasPackage.CONNECTOR__REPRESENTS:
        setRepresents((String)newValue);
        return;
      case CanvasPackage.CONNECTOR__POLYLINE:
        setPolyline((Polyline)newValue);
        return;
      case CanvasPackage.CONNECTOR__ANCHORS:
        setAnchors((Anchors)newValue);
        return;
      case CanvasPackage.CONNECTOR__TEXTS:
        setTexts((FloatingTexts)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CanvasPackage.CONNECTOR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case CanvasPackage.CONNECTOR__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case CanvasPackage.CONNECTOR__REPRESENTS:
        setRepresents(REPRESENTS_EDEFAULT);
        return;
      case CanvasPackage.CONNECTOR__POLYLINE:
        setPolyline((Polyline)null);
        return;
      case CanvasPackage.CONNECTOR__ANCHORS:
        setAnchors((Anchors)null);
        return;
      case CanvasPackage.CONNECTOR__TEXTS:
        setTexts((FloatingTexts)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CanvasPackage.CONNECTOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case CanvasPackage.CONNECTOR__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case CanvasPackage.CONNECTOR__REPRESENTS:
        return REPRESENTS_EDEFAULT == null ? represents != null : !REPRESENTS_EDEFAULT.equals(represents);
      case CanvasPackage.CONNECTOR__POLYLINE:
        return polyline != null;
      case CanvasPackage.CONNECTOR__ANCHORS:
        return anchors != null;
      case CanvasPackage.CONNECTOR__TEXTS:
        return texts != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", type: ");
    result.append(type);
    result.append(", represents: ");
    result.append(represents);
    result.append(')');
    return result.toString();
  }

} //ConnectorImpl
