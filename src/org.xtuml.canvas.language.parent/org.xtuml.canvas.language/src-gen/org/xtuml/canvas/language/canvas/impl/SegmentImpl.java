/**
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.canvas.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtuml.canvas.language.canvas.CanvasPackage;
import org.xtuml.canvas.language.canvas.Point;
import org.xtuml.canvas.language.canvas.Segment;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Segment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.SegmentImpl#getStartPoint <em>Start Point</em>}</li>
 *   <li>{@link org.xtuml.canvas.language.canvas.impl.SegmentImpl#getEndPoint <em>End Point</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SegmentImpl extends MinimalEObjectImpl.Container implements Segment
{
  /**
   * The cached value of the '{@link #getStartPoint() <em>Start Point</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartPoint()
   * @generated
   * @ordered
   */
  protected Point startPoint;

  /**
   * The cached value of the '{@link #getEndPoint() <em>End Point</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndPoint()
   * @generated
   * @ordered
   */
  protected Point endPoint;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SegmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CanvasPackage.Literals.SEGMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Point getStartPoint()
  {
    return startPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStartPoint(Point newStartPoint, NotificationChain msgs)
  {
    Point oldStartPoint = startPoint;
    startPoint = newStartPoint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CanvasPackage.SEGMENT__START_POINT, oldStartPoint, newStartPoint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartPoint(Point newStartPoint)
  {
    if (newStartPoint != startPoint)
    {
      NotificationChain msgs = null;
      if (startPoint != null)
        msgs = ((InternalEObject)startPoint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.SEGMENT__START_POINT, null, msgs);
      if (newStartPoint != null)
        msgs = ((InternalEObject)newStartPoint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.SEGMENT__START_POINT, null, msgs);
      msgs = basicSetStartPoint(newStartPoint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.SEGMENT__START_POINT, newStartPoint, newStartPoint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Point getEndPoint()
  {
    return endPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEndPoint(Point newEndPoint, NotificationChain msgs)
  {
    Point oldEndPoint = endPoint;
    endPoint = newEndPoint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CanvasPackage.SEGMENT__END_POINT, oldEndPoint, newEndPoint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEndPoint(Point newEndPoint)
  {
    if (newEndPoint != endPoint)
    {
      NotificationChain msgs = null;
      if (endPoint != null)
        msgs = ((InternalEObject)endPoint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.SEGMENT__END_POINT, null, msgs);
      if (newEndPoint != null)
        msgs = ((InternalEObject)newEndPoint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CanvasPackage.SEGMENT__END_POINT, null, msgs);
      msgs = basicSetEndPoint(newEndPoint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CanvasPackage.SEGMENT__END_POINT, newEndPoint, newEndPoint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CanvasPackage.SEGMENT__START_POINT:
        return basicSetStartPoint(null, msgs);
      case CanvasPackage.SEGMENT__END_POINT:
        return basicSetEndPoint(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CanvasPackage.SEGMENT__START_POINT:
        return getStartPoint();
      case CanvasPackage.SEGMENT__END_POINT:
        return getEndPoint();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CanvasPackage.SEGMENT__START_POINT:
        setStartPoint((Point)newValue);
        return;
      case CanvasPackage.SEGMENT__END_POINT:
        setEndPoint((Point)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CanvasPackage.SEGMENT__START_POINT:
        setStartPoint((Point)null);
        return;
      case CanvasPackage.SEGMENT__END_POINT:
        setEndPoint((Point)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CanvasPackage.SEGMENT__START_POINT:
        return startPoint != null;
      case CanvasPackage.SEGMENT__END_POINT:
        return endPoint != null;
    }
    return super.eIsSet(featureID);
  }

} //SegmentImpl
