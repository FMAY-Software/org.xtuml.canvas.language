/*
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CanvasGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRenderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRenderModelRenderParserRuleCall_0_0 = (RuleCall)cRenderAssignment_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesModelPropertiesParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsGraphicalElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Model:
		//	render=ModelRender
		//	properties=ModelProperties?
		//	elements+=GraphicalElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//render=ModelRender properties=ModelProperties? elements+=GraphicalElement*
		public Group getGroup() { return cGroup; }
		
		//render=ModelRender
		public Assignment getRenderAssignment_0() { return cRenderAssignment_0; }
		
		//ModelRender
		public RuleCall getRenderModelRenderParserRuleCall_0_0() { return cRenderModelRenderParserRuleCall_0_0; }
		
		//properties=ModelProperties?
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//ModelProperties
		public RuleCall getPropertiesModelPropertiesParserRuleCall_1_0() { return cPropertiesModelPropertiesParserRuleCall_1_0; }
		
		//elements+=GraphicalElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//GraphicalElement
		public RuleCall getElementsGraphicalElementParserRuleCall_2_0() { return cElementsGraphicalElementParserRuleCall_2_0; }
	}
	public class ModelRenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.ModelRender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall)cImportURIAssignment_2.eContents().get(0);
		
		//ModelRender:
		//	'render' ':' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'render' ':' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'render'
		public Keyword getRenderKeyword_0() { return cRenderKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_0() { return cImportURISTRINGTerminalRuleCall_2_0; }
	}
	public class ModelPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.ModelProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cViewportKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPointAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPointPointParserRuleCall_4_0 = (RuleCall)cPointAssignment_4.eContents().get(0);
		private final Keyword cZoomKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cZoomAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cZoomINTTerminalRuleCall_7_0 = (RuleCall)cZoomAssignment_7.eContents().get(0);
		
		//ModelProperties:
		//	'properties' ':'
		//	'viewport' ':' point=Point
		//	'zoom' ':' zoom=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'properties' ':' 'viewport' ':' point=Point 'zoom' ':' zoom=INT
		public Group getGroup() { return cGroup; }
		
		//'properties'
		public Keyword getPropertiesKeyword_0() { return cPropertiesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'viewport'
		public Keyword getViewportKeyword_2() { return cViewportKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//point=Point
		public Assignment getPointAssignment_4() { return cPointAssignment_4; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_4_0() { return cPointPointParserRuleCall_4_0; }
		
		//'zoom'
		public Keyword getZoomKeyword_5() { return cZoomKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//zoom=INT
		public Assignment getZoomAssignment_7() { return cZoomAssignment_7; }
		
		//INT
		public RuleCall getZoomINTTerminalRuleCall_7_0() { return cZoomINTTerminalRuleCall_7_0; }
	}
	public class GraphicalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.GraphicalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShapesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectorsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GraphicalElement:
		//	Shapes | Connectors;
		@Override public ParserRule getRule() { return rule; }
		
		//Shapes | Connectors
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Shapes
		public RuleCall getShapesParserRuleCall_0() { return cShapesParserRuleCall_0; }
		
		//Connectors
		public RuleCall getConnectorsParserRuleCall_1() { return cConnectorsParserRuleCall_1; }
	}
	public class ShapesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Shapes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShapesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cShapesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShapesShapeParserRuleCall_3_0 = (RuleCall)cShapesAssignment_3.eContents().get(0);
		
		//Shapes:
		//	{Shapes} 'shapes' ':' shapes+=Shape*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Shapes} 'shapes' ':' shapes+=Shape*
		public Group getGroup() { return cGroup; }
		
		//{Shapes}
		public Action getShapesAction_0() { return cShapesAction_0; }
		
		//'shapes'
		public Keyword getShapesKeyword_1() { return cShapesKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//shapes+=Shape*
		public Assignment getShapesAssignment_3() { return cShapesAssignment_3; }
		
		//Shape
		public RuleCall getShapesShapeParserRuleCall_3_0() { return cShapesShapeParserRuleCall_3_0; }
	}
	public class ShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Shape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShapeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cContainerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContainerContainerParserRuleCall_4_0 = (RuleCall)cContainerAssignment_4.eContents().get(0);
		private final Keyword cRenderKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeTypeLabelParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Assignment cRepresentsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRepresentsSTRINGTerminalRuleCall_8_0 = (RuleCall)cRepresentsAssignment_8.eContents().get(0);
		private final Assignment cBoundsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBoundsBoundsParserRuleCall_9_0 = (RuleCall)cBoundsAssignment_9.eContents().get(0);
		private final Assignment cTextAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTextFloatingTextParserRuleCall_10_0 = (RuleCall)cTextAssignment_10.eContents().get(0);
		
		//Shape:
		//	{Shape} 'shape' ':' name=ID
		//	container=Container?
		//	'render' ':' type=TypeLabel represents=STRING
		//	bounds=Bounds text=FloatingText?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Shape} 'shape' ':' name=ID container=Container? 'render' ':' type=TypeLabel represents=STRING bounds=Bounds
		//text=FloatingText?
		public Group getGroup() { return cGroup; }
		
		//{Shape}
		public Action getShapeAction_0() { return cShapeAction_0; }
		
		//'shape'
		public Keyword getShapeKeyword_1() { return cShapeKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//container=Container?
		public Assignment getContainerAssignment_4() { return cContainerAssignment_4; }
		
		//Container
		public RuleCall getContainerContainerParserRuleCall_4_0() { return cContainerContainerParserRuleCall_4_0; }
		
		//'render'
		public Keyword getRenderKeyword_5() { return cRenderKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//type=TypeLabel
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }
		
		//TypeLabel
		public RuleCall getTypeTypeLabelParserRuleCall_7_0() { return cTypeTypeLabelParserRuleCall_7_0; }
		
		//represents=STRING
		public Assignment getRepresentsAssignment_8() { return cRepresentsAssignment_8; }
		
		//STRING
		public RuleCall getRepresentsSTRINGTerminalRuleCall_8_0() { return cRepresentsSTRINGTerminalRuleCall_8_0; }
		
		//bounds=Bounds
		public Assignment getBoundsAssignment_9() { return cBoundsAssignment_9; }
		
		//Bounds
		public RuleCall getBoundsBoundsParserRuleCall_9_0() { return cBoundsBoundsParserRuleCall_9_0; }
		
		//text=FloatingText?
		public Assignment getTextAssignment_10() { return cTextAssignment_10; }
		
		//FloatingText
		public RuleCall getTextFloatingTextParserRuleCall_10_0() { return cTextFloatingTextParserRuleCall_10_0; }
	}
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Container");
		private final Keyword cContainerKeyword = (Keyword)rule.eContents().get(1);
		
		//Container:
		//	'container';
		@Override public ParserRule getRule() { return rule; }
		
		//'container'
		public Keyword getContainerKeyword() { return cContainerKeyword; }
	}
	public class FloatingTextsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.FloatingTexts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatingTextsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTextsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextsFloatingTextParserRuleCall_3_0 = (RuleCall)cTextsAssignment_3.eContents().get(0);
		
		//FloatingTexts:
		//	{FloatingTexts} 'texts' ':' texts+=FloatingText*;
		@Override public ParserRule getRule() { return rule; }
		
		//{FloatingTexts} 'texts' ':' texts+=FloatingText*
		public Group getGroup() { return cGroup; }
		
		//{FloatingTexts}
		public Action getFloatingTextsAction_0() { return cFloatingTextsAction_0; }
		
		//'texts'
		public Keyword getTextsKeyword_1() { return cTextsKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//texts+=FloatingText*
		public Assignment getTextsAssignment_3() { return cTextsAssignment_3; }
		
		//FloatingText
		public RuleCall getTextsFloatingTextParserRuleCall_3_0() { return cTextsFloatingTextParserRuleCall_3_0; }
	}
	public class FloatingTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.FloatingText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatingTextAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBoundsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBoundsBoundsParserRuleCall_3_0 = (RuleCall)cBoundsAssignment_3.eContents().get(0);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndEnumEndParserRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		
		//FloatingText:
		//	{FloatingText} 'text' ':'
		//	bounds=Bounds
		//	end=EnumEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//{FloatingText} 'text' ':' bounds=Bounds end=EnumEnd
		public Group getGroup() { return cGroup; }
		
		//{FloatingText}
		public Action getFloatingTextAction_0() { return cFloatingTextAction_0; }
		
		//'text'
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//bounds=Bounds
		public Assignment getBoundsAssignment_3() { return cBoundsAssignment_3; }
		
		//Bounds
		public RuleCall getBoundsBoundsParserRuleCall_3_0() { return cBoundsBoundsParserRuleCall_3_0; }
		
		//end=EnumEnd
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//EnumEnd
		public RuleCall getEndEnumEndParserRuleCall_4_0() { return cEndEnumEndParserRuleCall_4_0; }
	}
	public class EnumEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.EnumEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWhereAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cWhereAlternatives_2_0 = (Alternatives)cWhereAssignment_2.eContents().get(0);
		private final Keyword cWhereStartKeyword_2_0_0 = (Keyword)cWhereAlternatives_2_0.eContents().get(0);
		private final Keyword cWhereEndKeyword_2_0_1 = (Keyword)cWhereAlternatives_2_0.eContents().get(1);
		private final Keyword cWhereMiddleKeyword_2_0_2 = (Keyword)cWhereAlternatives_2_0.eContents().get(2);
		private final Keyword cWhereEnd_fixedKeyword_2_0_3 = (Keyword)cWhereAlternatives_2_0.eContents().get(3);
		private final Keyword cWhereStart_fixedKeyword_2_0_4 = (Keyword)cWhereAlternatives_2_0.eContents().get(4);
		private final Keyword cWhereNoneKeyword_2_0_5 = (Keyword)cWhereAlternatives_2_0.eContents().get(5);
		private final Keyword cWhereFloatingKeyword_2_0_6 = (Keyword)cWhereAlternatives_2_0.eContents().get(6);
		private final Keyword cWhereAdditionalKeyword_2_0_7 = (Keyword)cWhereAlternatives_2_0.eContents().get(7);
		
		//EnumEnd:
		//	'where' ':' where=('start' | 'end' | 'middle' | 'end_fixed' | 'start_fixed' | 'none' | 'floating' |
		//	'additional');
		@Override public ParserRule getRule() { return rule; }
		
		//'where' ':' where=('start' | 'end' | 'middle' | 'end_fixed' | 'start_fixed' | 'none' | 'floating' | 'additional')
		public Group getGroup() { return cGroup; }
		
		//'where'
		public Keyword getWhereKeyword_0() { return cWhereKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//where=('start' | 'end' | 'middle' | 'end_fixed' | 'start_fixed' | 'none' | 'floating' | 'additional')
		public Assignment getWhereAssignment_2() { return cWhereAssignment_2; }
		
		//('start' | 'end' | 'middle' | 'end_fixed' | 'start_fixed' | 'none' | 'floating' | 'additional')
		public Alternatives getWhereAlternatives_2_0() { return cWhereAlternatives_2_0; }
		
		//'start'
		public Keyword getWhereStartKeyword_2_0_0() { return cWhereStartKeyword_2_0_0; }
		
		//'end'
		public Keyword getWhereEndKeyword_2_0_1() { return cWhereEndKeyword_2_0_1; }
		
		//'middle'
		public Keyword getWhereMiddleKeyword_2_0_2() { return cWhereMiddleKeyword_2_0_2; }
		
		//'end_fixed'
		public Keyword getWhereEnd_fixedKeyword_2_0_3() { return cWhereEnd_fixedKeyword_2_0_3; }
		
		//'start_fixed'
		public Keyword getWhereStart_fixedKeyword_2_0_4() { return cWhereStart_fixedKeyword_2_0_4; }
		
		//'none'
		public Keyword getWhereNoneKeyword_2_0_5() { return cWhereNoneKeyword_2_0_5; }
		
		//'floating'
		public Keyword getWhereFloatingKeyword_2_0_6() { return cWhereFloatingKeyword_2_0_6; }
		
		//'additional'
		public Keyword getWhereAdditionalKeyword_2_0_7() { return cWhereAdditionalKeyword_2_0_7; }
	}
	public class ConnectorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Connectors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConnectorsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConnectorsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConnectorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConnectorsConnectorParserRuleCall_3_0 = (RuleCall)cConnectorsAssignment_3.eContents().get(0);
		
		//Connectors:
		//	{Connectors} 'connectors' ':' connectors+=Connector*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Connectors} 'connectors' ':' connectors+=Connector*
		public Group getGroup() { return cGroup; }
		
		//{Connectors}
		public Action getConnectorsAction_0() { return cConnectorsAction_0; }
		
		//'connectors'
		public Keyword getConnectorsKeyword_1() { return cConnectorsKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//connectors+=Connector*
		public Assignment getConnectorsAssignment_3() { return cConnectorsAssignment_3; }
		
		//Connector
		public RuleCall getConnectorsConnectorParserRuleCall_3_0() { return cConnectorsConnectorParserRuleCall_3_0; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRenderKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeTypeLabelParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Assignment cRepresentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRepresentsSTRINGTerminalRuleCall_6_0 = (RuleCall)cRepresentsAssignment_6.eContents().get(0);
		private final Assignment cPolylineAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPolylinePolylineParserRuleCall_7_0 = (RuleCall)cPolylineAssignment_7.eContents().get(0);
		private final Assignment cAnchorsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAnchorsAnchorsParserRuleCall_8_0 = (RuleCall)cAnchorsAssignment_8.eContents().get(0);
		private final Assignment cTextsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTextsFloatingTextsParserRuleCall_9_0 = (RuleCall)cTextsAssignment_9.eContents().get(0);
		
		//Connector:
		//	'connector' ':' name=ID
		//	'render' ':' type=TypeLabel represents=STRING
		//	polyline=Polyline
		//	anchors=Anchors? texts=FloatingTexts;
		@Override public ParserRule getRule() { return rule; }
		
		//'connector' ':' name=ID 'render' ':' type=TypeLabel represents=STRING polyline=Polyline anchors=Anchors?
		//texts=FloatingTexts
		public Group getGroup() { return cGroup; }
		
		//'connector'
		public Keyword getConnectorKeyword_0() { return cConnectorKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'render'
		public Keyword getRenderKeyword_3() { return cRenderKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//type=TypeLabel
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//TypeLabel
		public RuleCall getTypeTypeLabelParserRuleCall_5_0() { return cTypeTypeLabelParserRuleCall_5_0; }
		
		//represents=STRING
		public Assignment getRepresentsAssignment_6() { return cRepresentsAssignment_6; }
		
		//STRING
		public RuleCall getRepresentsSTRINGTerminalRuleCall_6_0() { return cRepresentsSTRINGTerminalRuleCall_6_0; }
		
		//polyline=Polyline
		public Assignment getPolylineAssignment_7() { return cPolylineAssignment_7; }
		
		//Polyline
		public RuleCall getPolylinePolylineParserRuleCall_7_0() { return cPolylinePolylineParserRuleCall_7_0; }
		
		//anchors=Anchors?
		public Assignment getAnchorsAssignment_8() { return cAnchorsAssignment_8; }
		
		//Anchors
		public RuleCall getAnchorsAnchorsParserRuleCall_8_0() { return cAnchorsAnchorsParserRuleCall_8_0; }
		
		//texts=FloatingTexts
		public Assignment getTextsAssignment_9() { return cTextsAssignment_9; }
		
		//FloatingTexts
		public RuleCall getTextsFloatingTextsParserRuleCall_9_0() { return cTextsFloatingTextsParserRuleCall_9_0; }
	}
	public class AnchorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Anchors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnchorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAnchorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartAnchorStartAnchorParserRuleCall_2_0 = (RuleCall)cStartAnchorAssignment_2.eContents().get(0);
		private final Assignment cEndAnchorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndAnchorEndAnchorParserRuleCall_3_0 = (RuleCall)cEndAnchorAssignment_3.eContents().get(0);
		
		//Anchors:
		//	'anchors' ':' startAnchor=StartAnchor endAnchor=EndAnchor;
		@Override public ParserRule getRule() { return rule; }
		
		//'anchors' ':' startAnchor=StartAnchor endAnchor=EndAnchor
		public Group getGroup() { return cGroup; }
		
		//'anchors'
		public Keyword getAnchorsKeyword_0() { return cAnchorsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//startAnchor=StartAnchor
		public Assignment getStartAnchorAssignment_2() { return cStartAnchorAssignment_2; }
		
		//StartAnchor
		public RuleCall getStartAnchorStartAnchorParserRuleCall_2_0() { return cStartAnchorStartAnchorParserRuleCall_2_0; }
		
		//endAnchor=EndAnchor
		public Assignment getEndAnchorAssignment_3() { return cEndAnchorAssignment_3; }
		
		//EndAnchor
		public RuleCall getEndAnchorEndAnchorParserRuleCall_3_0() { return cEndAnchorEndAnchorParserRuleCall_3_0; }
	}
	public class StartAnchorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.StartAnchor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPointAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPointPointDefinitionParserRuleCall_2_0 = (RuleCall)cPointAssignment_2.eContents().get(0);
		private final Assignment cAnchorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnchorAnchorParserRuleCall_3_0 = (RuleCall)cAnchorAssignment_3.eContents().get(0);
		
		//StartAnchor:
		//	'start' ':' point=PointDefinition anchor=Anchor?;
		@Override public ParserRule getRule() { return rule; }
		
		//'start' ':' point=PointDefinition anchor=Anchor?
		public Group getGroup() { return cGroup; }
		
		//'start'
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//point=PointDefinition
		public Assignment getPointAssignment_2() { return cPointAssignment_2; }
		
		//PointDefinition
		public RuleCall getPointPointDefinitionParserRuleCall_2_0() { return cPointPointDefinitionParserRuleCall_2_0; }
		
		//anchor=Anchor?
		public Assignment getAnchorAssignment_3() { return cAnchorAssignment_3; }
		
		//Anchor
		public RuleCall getAnchorAnchorParserRuleCall_3_0() { return cAnchorAnchorParserRuleCall_3_0; }
	}
	public class EndAnchorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.EndAnchor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPointAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPointPointDefinitionParserRuleCall_2_0 = (RuleCall)cPointAssignment_2.eContents().get(0);
		private final Assignment cAnchorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnchorAnchorParserRuleCall_3_0 = (RuleCall)cAnchorAssignment_3.eContents().get(0);
		
		//EndAnchor:
		//	'end' ':' point=PointDefinition anchor=Anchor?;
		@Override public ParserRule getRule() { return rule; }
		
		//'end' ':' point=PointDefinition anchor=Anchor?
		public Group getGroup() { return cGroup; }
		
		//'end'
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//point=PointDefinition
		public Assignment getPointAssignment_2() { return cPointAssignment_2; }
		
		//PointDefinition
		public RuleCall getPointPointDefinitionParserRuleCall_2_0() { return cPointPointDefinitionParserRuleCall_2_0; }
		
		//anchor=Anchor?
		public Assignment getAnchorAssignment_3() { return cAnchorAssignment_3; }
		
		//Anchor
		public RuleCall getAnchorAnchorParserRuleCall_3_0() { return cAnchorAnchorParserRuleCall_3_0; }
	}
	public class AnchorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Anchor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShapeAnchorElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectorAnchorElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Anchor:
		//	ShapeAnchorElement | ConnectorAnchorElement;
		@Override public ParserRule getRule() { return rule; }
		
		//ShapeAnchorElement | ConnectorAnchorElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ShapeAnchorElement
		public RuleCall getShapeAnchorElementParserRuleCall_0() { return cShapeAnchorElementParserRuleCall_0; }
		
		//ConnectorAnchorElement
		public RuleCall getConnectorAnchorElementParserRuleCall_1() { return cConnectorAnchorElementParserRuleCall_1; }
	}
	public class ShapeAnchorElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.ShapeAnchorElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShapeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cElementShapeCrossReference_2_0 = (CrossReference)cElementAssignment_2.eContents().get(0);
		private final RuleCall cElementShapeIDTerminalRuleCall_2_0_1 = (RuleCall)cElementShapeCrossReference_2_0.eContents().get(1);
		
		//ShapeAnchorElement:
		//	'shape' ':' element=[Shape];
		@Override public ParserRule getRule() { return rule; }
		
		//'shape' ':' element=[Shape]
		public Group getGroup() { return cGroup; }
		
		//'shape'
		public Keyword getShapeKeyword_0() { return cShapeKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//element=[Shape]
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//[Shape]
		public CrossReference getElementShapeCrossReference_2_0() { return cElementShapeCrossReference_2_0; }
		
		//ID
		public RuleCall getElementShapeIDTerminalRuleCall_2_0_1() { return cElementShapeIDTerminalRuleCall_2_0_1; }
	}
	public class ConnectorAnchorElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.ConnectorAnchorElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cElementConnectorCrossReference_2_0 = (CrossReference)cElementAssignment_2.eContents().get(0);
		private final RuleCall cElementConnectorIDTerminalRuleCall_2_0_1 = (RuleCall)cElementConnectorCrossReference_2_0.eContents().get(1);
		
		//ConnectorAnchorElement:
		//	'connector' ':' element=[Connector];
		@Override public ParserRule getRule() { return rule; }
		
		//'connector' ':' element=[Connector]
		public Group getGroup() { return cGroup; }
		
		//'connector'
		public Keyword getConnectorKeyword_0() { return cConnectorKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//element=[Connector]
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//[Connector]
		public CrossReference getElementConnectorCrossReference_2_0() { return cElementConnectorCrossReference_2_0; }
		
		//ID
		public RuleCall getElementConnectorIDTerminalRuleCall_2_0_1() { return cElementConnectorIDTerminalRuleCall_2_0_1; }
	}
	public class PolylineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Polyline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPolylineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPolylineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSegmentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSegmentsSegmentParserRuleCall_3_0 = (RuleCall)cSegmentsAssignment_3.eContents().get(0);
		
		//Polyline:
		//	{Polyline} 'polyline' ':' segments+=Segment*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Polyline} 'polyline' ':' segments+=Segment*
		public Group getGroup() { return cGroup; }
		
		//{Polyline}
		public Action getPolylineAction_0() { return cPolylineAction_0; }
		
		//'polyline'
		public Keyword getPolylineKeyword_1() { return cPolylineKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//segments+=Segment*
		public Assignment getSegmentsAssignment_3() { return cSegmentsAssignment_3; }
		
		//Segment
		public RuleCall getSegmentsSegmentParserRuleCall_3_0() { return cSegmentsSegmentParserRuleCall_3_0; }
	}
	public class SegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Segment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSegmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStartKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStartPointAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStartPointPointParserRuleCall_4_0 = (RuleCall)cStartPointAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEndPointAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEndPointPointParserRuleCall_7_0 = (RuleCall)cEndPointAssignment_7.eContents().get(0);
		
		//Segment:
		//	'segment' ':' 'start' ':' startPoint=Point 'end' ':' endPoint=Point;
		@Override public ParserRule getRule() { return rule; }
		
		//'segment' ':' 'start' ':' startPoint=Point 'end' ':' endPoint=Point
		public Group getGroup() { return cGroup; }
		
		//'segment'
		public Keyword getSegmentKeyword_0() { return cSegmentKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'start'
		public Keyword getStartKeyword_2() { return cStartKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//startPoint=Point
		public Assignment getStartPointAssignment_4() { return cStartPointAssignment_4; }
		
		//Point
		public RuleCall getStartPointPointParserRuleCall_4_0() { return cStartPointPointParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//endPoint=Point
		public Assignment getEndPointAssignment_7() { return cEndPointAssignment_7; }
		
		//Point
		public RuleCall getEndPointPointParserRuleCall_7_0() { return cEndPointPointParserRuleCall_7_0; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cYKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYINTTerminalRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		
		//Point:
		//	'x' ':' x=INT 'y' ':' y=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'x' ':' x=INT 'y' ':' y=INT
		public Group getGroup() { return cGroup; }
		
		//'x'
		public Keyword getXKeyword_0() { return cXKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//x=INT
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_2_0() { return cXINTTerminalRuleCall_2_0; }
		
		//'y'
		public Keyword getYKeyword_3() { return cYKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//y=INT
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_5_0() { return cYINTTerminalRuleCall_5_0; }
	}
	public class PointDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.PointDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXINTTerminalRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cYKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cYAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cYINTTerminalRuleCall_7_0 = (RuleCall)cYAssignment_7.eContents().get(0);
		
		//PointDefinition:
		//	'point' ':'
		//	'x' ':' x=INT 'y' ':' y=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'point' ':' 'x' ':' x=INT 'y' ':' y=INT
		public Group getGroup() { return cGroup; }
		
		//'point'
		public Keyword getPointKeyword_0() { return cPointKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//x=INT
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_4_0() { return cXINTTerminalRuleCall_4_0; }
		
		//'y'
		public Keyword getYKeyword_5() { return cYKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//y=INT
		public Assignment getYAssignment_7() { return cYAssignment_7; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_7_0() { return cYINTTerminalRuleCall_7_0; }
	}
	public class BoundsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Bounds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoundsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXINTTerminalRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cYKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cYAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cYINTTerminalRuleCall_7_0 = (RuleCall)cYAssignment_7.eContents().get(0);
		private final Keyword cWidthKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cWAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cWINTTerminalRuleCall_10_0 = (RuleCall)cWAssignment_10.eContents().get(0);
		private final Keyword cHeightKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cColonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cHAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cHINTTerminalRuleCall_13_0 = (RuleCall)cHAssignment_13.eContents().get(0);
		
		//Bounds:
		//	'bounds' ':'
		//	'x' ':' x=INT
		//	'y' ':' y=INT
		//	'width' ':' w=INT
		//	'height' ':' h=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'bounds' ':' 'x' ':' x=INT 'y' ':' y=INT 'width' ':' w=INT 'height' ':' h=INT
		public Group getGroup() { return cGroup; }
		
		//'bounds'
		public Keyword getBoundsKeyword_0() { return cBoundsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//x=INT
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_4_0() { return cXINTTerminalRuleCall_4_0; }
		
		//'y'
		public Keyword getYKeyword_5() { return cYKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//y=INT
		public Assignment getYAssignment_7() { return cYAssignment_7; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_7_0() { return cYINTTerminalRuleCall_7_0; }
		
		//'width'
		public Keyword getWidthKeyword_8() { return cWidthKeyword_8; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//w=INT
		public Assignment getWAssignment_10() { return cWAssignment_10; }
		
		//INT
		public RuleCall getWINTTerminalRuleCall_10_0() { return cWINTTerminalRuleCall_10_0; }
		
		//'height'
		public Keyword getHeightKeyword_11() { return cHeightKeyword_11; }
		
		//':'
		public Keyword getColonKeyword_12() { return cColonKeyword_12; }
		
		//h=INT
		public Assignment getHAssignment_13() { return cHAssignment_13; }
		
		//INT
		public RuleCall getHINTTerminalRuleCall_13_0() { return cHINTTerminalRuleCall_13_0; }
	}
	public class TypeLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.TypeLabel");
		private final RuleCall cOOATypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypeLabel:
		//	OOAType;
		@Override public ParserRule getRule() { return rule; }
		
		//OOAType
		public RuleCall getOOATypeParserRuleCall() { return cOOATypeParserRuleCall; }
	}
	public class OOATypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.OOAType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAccess_pathKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAssociationKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAssociative_linkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cClassKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCommunication_pathKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cData_typeKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDerived_access_pathKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDerived_communication_pathKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cEeKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cEnumeration_data_typeKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cImported_classKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cNoneKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cStateKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cState_machineKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cSubsystemKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cTransitionKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cUser_data_typeKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cSubtypeKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cSupertypeKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cCreation_transitionKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cSequenceKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cLifelineKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cTiming_markKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cTime_spanKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cSynchronous_messageKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cClass_instance_participantKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cExternal_entity_participantKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cClass_participantKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cActorKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cAsynchronous_messageKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cReturn_messageKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cCommunicationKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cCommunication_linkKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cCommunication_return_messageKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cCommunication_asynchronous_messageKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cCommunication_synchronous_messageKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cUse_caseKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cUse_case_diagramKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cUse_case_binary_associationKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cGeneralizationKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cIncludeKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cExtendKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cForkJoinKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cActivityKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cInitial_nodeKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cActivity_edgeKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cActivity_final_nodeKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cFlow_final_nodeKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cGeneric_actionKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cDecision_merge_nodeKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cObject_nodeKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cAccept_event_actionKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cSend_signal_actionKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cAccept_time_event_actionKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cPartitionKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cComponentKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		private final Keyword cProvided_interfaceKeyword_56 = (Keyword)cAlternatives.eContents().get(56);
		private final Keyword cRequired_interfaceKeyword_57 = (Keyword)cAlternatives.eContents().get(57);
		private final Keyword cInterfaceKeyword_58 = (Keyword)cAlternatives.eContents().get(58);
		private final Keyword cSystem_modelKeyword_59 = (Keyword)cAlternatives.eContents().get(59);
		private final Keyword cStructured_data_typeKeyword_60 = (Keyword)cAlternatives.eContents().get(60);
		private final Keyword cComponent_referenceKeyword_61 = (Keyword)cAlternatives.eContents().get(61);
		private final Keyword cComponent_diagramKeyword_62 = (Keyword)cAlternatives.eContents().get(62);
		private final Keyword cDelegationKeyword_63 = (Keyword)cAlternatives.eContents().get(63);
		private final Keyword cComponent_containerKeyword_64 = (Keyword)cAlternatives.eContents().get(64);
		private final Keyword cImported_provided_interfaceKeyword_65 = (Keyword)cAlternatives.eContents().get(65);
		private final Keyword cImported_required_interfaceKeyword_66 = (Keyword)cAlternatives.eContents().get(66);
		private final Keyword cComponent_participantKeyword_67 = (Keyword)cAlternatives.eContents().get(67);
		private final Keyword cPackageKeyword_68 = (Keyword)cAlternatives.eContents().get(68);
		private final Keyword cConstant_specificationKeyword_69 = (Keyword)cAlternatives.eContents().get(69);
		private final Keyword cPackage_participantKeyword_70 = (Keyword)cAlternatives.eContents().get(70);
		private final Keyword cShapeKeyword_71 = (Keyword)cAlternatives.eContents().get(71);
		private final Keyword cConnectorKeyword_72 = (Keyword)cAlternatives.eContents().get(72);
		private final Keyword cDiagramKeyword_73 = (Keyword)cAlternatives.eContents().get(73);
		private final Keyword cExceptionKeyword_74 = (Keyword)cAlternatives.eContents().get(74);
		private final Keyword cSatisfactionKeyword_75 = (Keyword)cAlternatives.eContents().get(75);
		private final Keyword cDeploymentKeyword_76 = (Keyword)cAlternatives.eContents().get(76);
		
		//OOAType:
		//	'access_path' |
		//	'association' |
		//	'associative_link' |
		//	'class' |
		//	'communication_path' |
		//	'data_type' |
		//	'derived_access_path' |
		//	'derived_communication_path' |
		//	'ee' |
		//	'enumeration_data_type' |
		//	'imported_class' |
		//	'none' |
		//	'state' |
		//	'state_machine' |
		//	'subsystem' |
		//	'transition' |
		//	'user_data_type' |
		//	'subtype' |
		//	'supertype' |
		//	'creation_transition' |
		//	'sequence' |
		//	'lifeline' |
		//	'timing_mark' |
		//	'time_span' |
		//	'synchronous_message' |
		//	'class_instance_participant' |
		//	'external_entity_participant' |
		//	'class_participant' |
		//	'actor' |
		//	'asynchronous_message' |
		//	'return_message' |
		//	'communication' |
		//	'communication_link' |
		//	'communication_return_message' |
		//	'communication_asynchronous_message' |
		//	'communication_synchronous_message' |
		//	'use_case' |
		//	'use_case_diagram' |
		//	'use_case_binary_association' |
		//	'generalization' |
		//	'include' |
		//	'extend' |
		//	'forkJoin' |
		//	'activity' |
		//	'initial_node' |
		//	'activity_edge' |
		//	'activity_final_node' |
		//	'flow_final_node' |
		//	'generic_action' |
		//	'decision_merge_node' |
		//	'object_node' |
		//	'accept_event_action' |
		//	'send_signal_action' |
		//	'accept_time_event_action' |
		//	'partition' |
		//	'component' |
		//	'provided_interface' |
		//	'required_interface' |
		//	'interface' |
		//	'system_model' |
		//	'structured_data_type' |
		//	'component_reference' |
		//	'component_diagram' |
		//	'delegation' |
		//	'component_container' |
		//	'imported_provided_interface' |
		//	'imported_required_interface' |
		//	'component_participant' |
		//	'package' |
		//	'constant_specification' |
		//	'package_participant' |
		//	'shape' |
		//	'connector' |
		//	'diagram' |
		//	'exception' |
		//	'satisfaction' |
		//	'deployment';
		@Override public ParserRule getRule() { return rule; }
		
		//'access_path' | 'association' | 'associative_link' | 'class' | 'communication_path' | 'data_type' |
		//'derived_access_path' | 'derived_communication_path' | 'ee' | 'enumeration_data_type' | 'imported_class' | 'none' |
		//'state' | 'state_machine' | 'subsystem' | 'transition' | 'user_data_type' | 'subtype' | 'supertype' |
		//'creation_transition' | 'sequence' | 'lifeline' | 'timing_mark' | 'time_span' | 'synchronous_message' |
		//'class_instance_participant' | 'external_entity_participant' | 'class_participant' | 'actor' | 'asynchronous_message' |
		//'return_message' | 'communication' | 'communication_link' | 'communication_return_message' |
		//'communication_asynchronous_message' | 'communication_synchronous_message' | 'use_case' | 'use_case_diagram' |
		//'use_case_binary_association' | 'generalization' | 'include' | 'extend' | 'forkJoin' | 'activity' | 'initial_node' |
		//'activity_edge' | 'activity_final_node' | 'flow_final_node' | 'generic_action' | 'decision_merge_node' | 'object_node'
		//| 'accept_event_action' | 'send_signal_action' | 'accept_time_event_action' | 'partition' | 'component' |
		//'provided_interface' | 'required_interface' | 'interface' | 'system_model' | 'structured_data_type' |
		//'component_reference' | 'component_diagram' | 'delegation' | 'component_container' | 'imported_provided_interface' |
		//'imported_required_interface' | 'component_participant' | 'package' | 'constant_specification' | 'package_participant'
		//| 'shape' | 'connector' | 'diagram' | 'exception' | 'satisfaction' | 'deployment'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'access_path'
		public Keyword getAccess_pathKeyword_0() { return cAccess_pathKeyword_0; }
		
		//'association'
		public Keyword getAssociationKeyword_1() { return cAssociationKeyword_1; }
		
		//'associative_link'
		public Keyword getAssociative_linkKeyword_2() { return cAssociative_linkKeyword_2; }
		
		//'class'
		public Keyword getClassKeyword_3() { return cClassKeyword_3; }
		
		//'communication_path'
		public Keyword getCommunication_pathKeyword_4() { return cCommunication_pathKeyword_4; }
		
		//'data_type'
		public Keyword getData_typeKeyword_5() { return cData_typeKeyword_5; }
		
		//'derived_access_path'
		public Keyword getDerived_access_pathKeyword_6() { return cDerived_access_pathKeyword_6; }
		
		//'derived_communication_path'
		public Keyword getDerived_communication_pathKeyword_7() { return cDerived_communication_pathKeyword_7; }
		
		//'ee'
		public Keyword getEeKeyword_8() { return cEeKeyword_8; }
		
		//'enumeration_data_type'
		public Keyword getEnumeration_data_typeKeyword_9() { return cEnumeration_data_typeKeyword_9; }
		
		//'imported_class'
		public Keyword getImported_classKeyword_10() { return cImported_classKeyword_10; }
		
		//'none'
		public Keyword getNoneKeyword_11() { return cNoneKeyword_11; }
		
		//'state'
		public Keyword getStateKeyword_12() { return cStateKeyword_12; }
		
		//'state_machine'
		public Keyword getState_machineKeyword_13() { return cState_machineKeyword_13; }
		
		//'subsystem'
		public Keyword getSubsystemKeyword_14() { return cSubsystemKeyword_14; }
		
		//'transition'
		public Keyword getTransitionKeyword_15() { return cTransitionKeyword_15; }
		
		//'user_data_type'
		public Keyword getUser_data_typeKeyword_16() { return cUser_data_typeKeyword_16; }
		
		//'subtype'
		public Keyword getSubtypeKeyword_17() { return cSubtypeKeyword_17; }
		
		//'supertype'
		public Keyword getSupertypeKeyword_18() { return cSupertypeKeyword_18; }
		
		//'creation_transition'
		public Keyword getCreation_transitionKeyword_19() { return cCreation_transitionKeyword_19; }
		
		//'sequence'
		public Keyword getSequenceKeyword_20() { return cSequenceKeyword_20; }
		
		//'lifeline'
		public Keyword getLifelineKeyword_21() { return cLifelineKeyword_21; }
		
		//'timing_mark'
		public Keyword getTiming_markKeyword_22() { return cTiming_markKeyword_22; }
		
		//'time_span'
		public Keyword getTime_spanKeyword_23() { return cTime_spanKeyword_23; }
		
		//'synchronous_message'
		public Keyword getSynchronous_messageKeyword_24() { return cSynchronous_messageKeyword_24; }
		
		//'class_instance_participant'
		public Keyword getClass_instance_participantKeyword_25() { return cClass_instance_participantKeyword_25; }
		
		//'external_entity_participant'
		public Keyword getExternal_entity_participantKeyword_26() { return cExternal_entity_participantKeyword_26; }
		
		//'class_participant'
		public Keyword getClass_participantKeyword_27() { return cClass_participantKeyword_27; }
		
		//'actor'
		public Keyword getActorKeyword_28() { return cActorKeyword_28; }
		
		//'asynchronous_message'
		public Keyword getAsynchronous_messageKeyword_29() { return cAsynchronous_messageKeyword_29; }
		
		//'return_message'
		public Keyword getReturn_messageKeyword_30() { return cReturn_messageKeyword_30; }
		
		//'communication'
		public Keyword getCommunicationKeyword_31() { return cCommunicationKeyword_31; }
		
		//'communication_link'
		public Keyword getCommunication_linkKeyword_32() { return cCommunication_linkKeyword_32; }
		
		//'communication_return_message'
		public Keyword getCommunication_return_messageKeyword_33() { return cCommunication_return_messageKeyword_33; }
		
		//'communication_asynchronous_message'
		public Keyword getCommunication_asynchronous_messageKeyword_34() { return cCommunication_asynchronous_messageKeyword_34; }
		
		//'communication_synchronous_message'
		public Keyword getCommunication_synchronous_messageKeyword_35() { return cCommunication_synchronous_messageKeyword_35; }
		
		//'use_case'
		public Keyword getUse_caseKeyword_36() { return cUse_caseKeyword_36; }
		
		//'use_case_diagram'
		public Keyword getUse_case_diagramKeyword_37() { return cUse_case_diagramKeyword_37; }
		
		//'use_case_binary_association'
		public Keyword getUse_case_binary_associationKeyword_38() { return cUse_case_binary_associationKeyword_38; }
		
		//'generalization'
		public Keyword getGeneralizationKeyword_39() { return cGeneralizationKeyword_39; }
		
		//'include'
		public Keyword getIncludeKeyword_40() { return cIncludeKeyword_40; }
		
		//'extend'
		public Keyword getExtendKeyword_41() { return cExtendKeyword_41; }
		
		//'forkJoin'
		public Keyword getForkJoinKeyword_42() { return cForkJoinKeyword_42; }
		
		//'activity'
		public Keyword getActivityKeyword_43() { return cActivityKeyword_43; }
		
		//'initial_node'
		public Keyword getInitial_nodeKeyword_44() { return cInitial_nodeKeyword_44; }
		
		//'activity_edge'
		public Keyword getActivity_edgeKeyword_45() { return cActivity_edgeKeyword_45; }
		
		//'activity_final_node'
		public Keyword getActivity_final_nodeKeyword_46() { return cActivity_final_nodeKeyword_46; }
		
		//'flow_final_node'
		public Keyword getFlow_final_nodeKeyword_47() { return cFlow_final_nodeKeyword_47; }
		
		//'generic_action'
		public Keyword getGeneric_actionKeyword_48() { return cGeneric_actionKeyword_48; }
		
		//'decision_merge_node'
		public Keyword getDecision_merge_nodeKeyword_49() { return cDecision_merge_nodeKeyword_49; }
		
		//'object_node'
		public Keyword getObject_nodeKeyword_50() { return cObject_nodeKeyword_50; }
		
		//'accept_event_action'
		public Keyword getAccept_event_actionKeyword_51() { return cAccept_event_actionKeyword_51; }
		
		//'send_signal_action'
		public Keyword getSend_signal_actionKeyword_52() { return cSend_signal_actionKeyword_52; }
		
		//'accept_time_event_action'
		public Keyword getAccept_time_event_actionKeyword_53() { return cAccept_time_event_actionKeyword_53; }
		
		//'partition'
		public Keyword getPartitionKeyword_54() { return cPartitionKeyword_54; }
		
		//'component'
		public Keyword getComponentKeyword_55() { return cComponentKeyword_55; }
		
		//'provided_interface'
		public Keyword getProvided_interfaceKeyword_56() { return cProvided_interfaceKeyword_56; }
		
		//'required_interface'
		public Keyword getRequired_interfaceKeyword_57() { return cRequired_interfaceKeyword_57; }
		
		//'interface'
		public Keyword getInterfaceKeyword_58() { return cInterfaceKeyword_58; }
		
		//'system_model'
		public Keyword getSystem_modelKeyword_59() { return cSystem_modelKeyword_59; }
		
		//'structured_data_type'
		public Keyword getStructured_data_typeKeyword_60() { return cStructured_data_typeKeyword_60; }
		
		//'component_reference'
		public Keyword getComponent_referenceKeyword_61() { return cComponent_referenceKeyword_61; }
		
		//'component_diagram'
		public Keyword getComponent_diagramKeyword_62() { return cComponent_diagramKeyword_62; }
		
		//'delegation'
		public Keyword getDelegationKeyword_63() { return cDelegationKeyword_63; }
		
		//'component_container'
		public Keyword getComponent_containerKeyword_64() { return cComponent_containerKeyword_64; }
		
		//'imported_provided_interface'
		public Keyword getImported_provided_interfaceKeyword_65() { return cImported_provided_interfaceKeyword_65; }
		
		//'imported_required_interface'
		public Keyword getImported_required_interfaceKeyword_66() { return cImported_required_interfaceKeyword_66; }
		
		//'component_participant'
		public Keyword getComponent_participantKeyword_67() { return cComponent_participantKeyword_67; }
		
		//'package'
		public Keyword getPackageKeyword_68() { return cPackageKeyword_68; }
		
		//'constant_specification'
		public Keyword getConstant_specificationKeyword_69() { return cConstant_specificationKeyword_69; }
		
		//'package_participant'
		public Keyword getPackage_participantKeyword_70() { return cPackage_participantKeyword_70; }
		
		//'shape'
		public Keyword getShapeKeyword_71() { return cShapeKeyword_71; }
		
		//'connector'
		public Keyword getConnectorKeyword_72() { return cConnectorKeyword_72; }
		
		//'diagram'
		public Keyword getDiagramKeyword_73() { return cDiagramKeyword_73; }
		
		//'exception'
		public Keyword getExceptionKeyword_74() { return cExceptionKeyword_74; }
		
		//'satisfaction'
		public Keyword getSatisfactionKeyword_75() { return cSatisfactionKeyword_75; }
		
		//'deployment'
		public Keyword getDeploymentKeyword_76() { return cDeploymentKeyword_76; }
	}
	
	
	private final ModelElements pModel;
	private final ModelRenderElements pModelRender;
	private final ModelPropertiesElements pModelProperties;
	private final GraphicalElementElements pGraphicalElement;
	private final ShapesElements pShapes;
	private final ShapeElements pShape;
	private final ContainerElements pContainer;
	private final FloatingTextsElements pFloatingTexts;
	private final FloatingTextElements pFloatingText;
	private final EnumEndElements pEnumEnd;
	private final ConnectorsElements pConnectors;
	private final ConnectorElements pConnector;
	private final AnchorsElements pAnchors;
	private final StartAnchorElements pStartAnchor;
	private final EndAnchorElements pEndAnchor;
	private final AnchorElements pAnchor;
	private final ShapeAnchorElementElements pShapeAnchorElement;
	private final ConnectorAnchorElementElements pConnectorAnchorElement;
	private final PolylineElements pPolyline;
	private final SegmentElements pSegment;
	private final PointElements pPoint;
	private final PointDefinitionElements pPointDefinition;
	private final BoundsElements pBounds;
	private final TypeLabelElements pTypeLabel;
	private final OOATypeElements pOOAType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CanvasGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModelRender = new ModelRenderElements();
		this.pModelProperties = new ModelPropertiesElements();
		this.pGraphicalElement = new GraphicalElementElements();
		this.pShapes = new ShapesElements();
		this.pShape = new ShapeElements();
		this.pContainer = new ContainerElements();
		this.pFloatingTexts = new FloatingTextsElements();
		this.pFloatingText = new FloatingTextElements();
		this.pEnumEnd = new EnumEndElements();
		this.pConnectors = new ConnectorsElements();
		this.pConnector = new ConnectorElements();
		this.pAnchors = new AnchorsElements();
		this.pStartAnchor = new StartAnchorElements();
		this.pEndAnchor = new EndAnchorElements();
		this.pAnchor = new AnchorElements();
		this.pShapeAnchorElement = new ShapeAnchorElementElements();
		this.pConnectorAnchorElement = new ConnectorAnchorElementElements();
		this.pPolyline = new PolylineElements();
		this.pSegment = new SegmentElements();
		this.pPoint = new PointElements();
		this.pPointDefinition = new PointDefinitionElements();
		this.pBounds = new BoundsElements();
		this.pTypeLabel = new TypeLabelElements();
		this.pOOAType = new OOATypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtuml.canvas.language.Canvas".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	render=ModelRender
	//	properties=ModelProperties?
	//	elements+=GraphicalElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ModelRender:
	//	'render' ':' importURI=STRING;
	public ModelRenderElements getModelRenderAccess() {
		return pModelRender;
	}
	
	public ParserRule getModelRenderRule() {
		return getModelRenderAccess().getRule();
	}
	
	//ModelProperties:
	//	'properties' ':'
	//	'viewport' ':' point=Point
	//	'zoom' ':' zoom=INT;
	public ModelPropertiesElements getModelPropertiesAccess() {
		return pModelProperties;
	}
	
	public ParserRule getModelPropertiesRule() {
		return getModelPropertiesAccess().getRule();
	}
	
	//GraphicalElement:
	//	Shapes | Connectors;
	public GraphicalElementElements getGraphicalElementAccess() {
		return pGraphicalElement;
	}
	
	public ParserRule getGraphicalElementRule() {
		return getGraphicalElementAccess().getRule();
	}
	
	//Shapes:
	//	{Shapes} 'shapes' ':' shapes+=Shape*;
	public ShapesElements getShapesAccess() {
		return pShapes;
	}
	
	public ParserRule getShapesRule() {
		return getShapesAccess().getRule();
	}
	
	//Shape:
	//	{Shape} 'shape' ':' name=ID
	//	container=Container?
	//	'render' ':' type=TypeLabel represents=STRING
	//	bounds=Bounds text=FloatingText?;
	public ShapeElements getShapeAccess() {
		return pShape;
	}
	
	public ParserRule getShapeRule() {
		return getShapeAccess().getRule();
	}
	
	//Container:
	//	'container';
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//FloatingTexts:
	//	{FloatingTexts} 'texts' ':' texts+=FloatingText*;
	public FloatingTextsElements getFloatingTextsAccess() {
		return pFloatingTexts;
	}
	
	public ParserRule getFloatingTextsRule() {
		return getFloatingTextsAccess().getRule();
	}
	
	//FloatingText:
	//	{FloatingText} 'text' ':'
	//	bounds=Bounds
	//	end=EnumEnd;
	public FloatingTextElements getFloatingTextAccess() {
		return pFloatingText;
	}
	
	public ParserRule getFloatingTextRule() {
		return getFloatingTextAccess().getRule();
	}
	
	//EnumEnd:
	//	'where' ':' where=('start' | 'end' | 'middle' | 'end_fixed' | 'start_fixed' | 'none' | 'floating' |
	//	'additional');
	public EnumEndElements getEnumEndAccess() {
		return pEnumEnd;
	}
	
	public ParserRule getEnumEndRule() {
		return getEnumEndAccess().getRule();
	}
	
	//Connectors:
	//	{Connectors} 'connectors' ':' connectors+=Connector*;
	public ConnectorsElements getConnectorsAccess() {
		return pConnectors;
	}
	
	public ParserRule getConnectorsRule() {
		return getConnectorsAccess().getRule();
	}
	
	//Connector:
	//	'connector' ':' name=ID
	//	'render' ':' type=TypeLabel represents=STRING
	//	polyline=Polyline
	//	anchors=Anchors? texts=FloatingTexts;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//Anchors:
	//	'anchors' ':' startAnchor=StartAnchor endAnchor=EndAnchor;
	public AnchorsElements getAnchorsAccess() {
		return pAnchors;
	}
	
	public ParserRule getAnchorsRule() {
		return getAnchorsAccess().getRule();
	}
	
	//StartAnchor:
	//	'start' ':' point=PointDefinition anchor=Anchor?;
	public StartAnchorElements getStartAnchorAccess() {
		return pStartAnchor;
	}
	
	public ParserRule getStartAnchorRule() {
		return getStartAnchorAccess().getRule();
	}
	
	//EndAnchor:
	//	'end' ':' point=PointDefinition anchor=Anchor?;
	public EndAnchorElements getEndAnchorAccess() {
		return pEndAnchor;
	}
	
	public ParserRule getEndAnchorRule() {
		return getEndAnchorAccess().getRule();
	}
	
	//Anchor:
	//	ShapeAnchorElement | ConnectorAnchorElement;
	public AnchorElements getAnchorAccess() {
		return pAnchor;
	}
	
	public ParserRule getAnchorRule() {
		return getAnchorAccess().getRule();
	}
	
	//ShapeAnchorElement:
	//	'shape' ':' element=[Shape];
	public ShapeAnchorElementElements getShapeAnchorElementAccess() {
		return pShapeAnchorElement;
	}
	
	public ParserRule getShapeAnchorElementRule() {
		return getShapeAnchorElementAccess().getRule();
	}
	
	//ConnectorAnchorElement:
	//	'connector' ':' element=[Connector];
	public ConnectorAnchorElementElements getConnectorAnchorElementAccess() {
		return pConnectorAnchorElement;
	}
	
	public ParserRule getConnectorAnchorElementRule() {
		return getConnectorAnchorElementAccess().getRule();
	}
	
	//Polyline:
	//	{Polyline} 'polyline' ':' segments+=Segment*;
	public PolylineElements getPolylineAccess() {
		return pPolyline;
	}
	
	public ParserRule getPolylineRule() {
		return getPolylineAccess().getRule();
	}
	
	//Segment:
	//	'segment' ':' 'start' ':' startPoint=Point 'end' ':' endPoint=Point;
	public SegmentElements getSegmentAccess() {
		return pSegment;
	}
	
	public ParserRule getSegmentRule() {
		return getSegmentAccess().getRule();
	}
	
	//Point:
	//	'x' ':' x=INT 'y' ':' y=INT;
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//PointDefinition:
	//	'point' ':'
	//	'x' ':' x=INT 'y' ':' y=INT;
	public PointDefinitionElements getPointDefinitionAccess() {
		return pPointDefinition;
	}
	
	public ParserRule getPointDefinitionRule() {
		return getPointDefinitionAccess().getRule();
	}
	
	//Bounds:
	//	'bounds' ':'
	//	'x' ':' x=INT
	//	'y' ':' y=INT
	//	'width' ':' w=INT
	//	'height' ':' h=INT;
	public BoundsElements getBoundsAccess() {
		return pBounds;
	}
	
	public ParserRule getBoundsRule() {
		return getBoundsAccess().getRule();
	}
	
	//TypeLabel:
	//	OOAType;
	public TypeLabelElements getTypeLabelAccess() {
		return pTypeLabel;
	}
	
	public ParserRule getTypeLabelRule() {
		return getTypeLabelAccess().getRule();
	}
	
	//OOAType:
	//	'access_path' |
	//	'association' |
	//	'associative_link' |
	//	'class' |
	//	'communication_path' |
	//	'data_type' |
	//	'derived_access_path' |
	//	'derived_communication_path' |
	//	'ee' |
	//	'enumeration_data_type' |
	//	'imported_class' |
	//	'none' |
	//	'state' |
	//	'state_machine' |
	//	'subsystem' |
	//	'transition' |
	//	'user_data_type' |
	//	'subtype' |
	//	'supertype' |
	//	'creation_transition' |
	//	'sequence' |
	//	'lifeline' |
	//	'timing_mark' |
	//	'time_span' |
	//	'synchronous_message' |
	//	'class_instance_participant' |
	//	'external_entity_participant' |
	//	'class_participant' |
	//	'actor' |
	//	'asynchronous_message' |
	//	'return_message' |
	//	'communication' |
	//	'communication_link' |
	//	'communication_return_message' |
	//	'communication_asynchronous_message' |
	//	'communication_synchronous_message' |
	//	'use_case' |
	//	'use_case_diagram' |
	//	'use_case_binary_association' |
	//	'generalization' |
	//	'include' |
	//	'extend' |
	//	'forkJoin' |
	//	'activity' |
	//	'initial_node' |
	//	'activity_edge' |
	//	'activity_final_node' |
	//	'flow_final_node' |
	//	'generic_action' |
	//	'decision_merge_node' |
	//	'object_node' |
	//	'accept_event_action' |
	//	'send_signal_action' |
	//	'accept_time_event_action' |
	//	'partition' |
	//	'component' |
	//	'provided_interface' |
	//	'required_interface' |
	//	'interface' |
	//	'system_model' |
	//	'structured_data_type' |
	//	'component_reference' |
	//	'component_diagram' |
	//	'delegation' |
	//	'component_container' |
	//	'imported_provided_interface' |
	//	'imported_required_interface' |
	//	'component_participant' |
	//	'package' |
	//	'constant_specification' |
	//	'package_participant' |
	//	'shape' |
	//	'connector' |
	//	'diagram' |
	//	'exception' |
	//	'satisfaction' |
	//	'deployment';
	public OOATypeElements getOOATypeAccess() {
		return pOOAType;
	}
	
	public ParserRule getOOATypeRule() {
		return getOOATypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
