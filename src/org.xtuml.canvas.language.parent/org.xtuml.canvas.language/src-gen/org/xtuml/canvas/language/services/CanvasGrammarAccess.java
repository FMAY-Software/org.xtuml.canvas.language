/*
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CanvasGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSemanticsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSemanticsSemanticModelParserRuleCall_0_0 = (RuleCall)cSemanticsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRenderKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cRenderKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cRepresentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRepresentsSTRINGTerminalRuleCall_2_0 = (RuleCall)cRepresentsAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesModelPropertiesParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsGraphicalElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		
		//Model:
		//	semantics+=SemanticModel* ('render' ':' | 'render:') represents=STRING
		//	properties=ModelProperties?
		//	elements+=GraphicalElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//semantics+=SemanticModel* ('render' ':' | 'render:') represents=STRING properties=ModelProperties?
		//elements+=GraphicalElement*
		public Group getGroup() { return cGroup; }
		
		//semantics+=SemanticModel*
		public Assignment getSemanticsAssignment_0() { return cSemanticsAssignment_0; }
		
		//SemanticModel
		public RuleCall getSemanticsSemanticModelParserRuleCall_0_0() { return cSemanticsSemanticModelParserRuleCall_0_0; }
		
		//('render' ':' | 'render:')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'render' ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'render'
		public Keyword getRenderKeyword_1_0_0() { return cRenderKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//'render:'
		public Keyword getRenderKeyword_1_1() { return cRenderKeyword_1_1; }
		
		//represents=STRING
		public Assignment getRepresentsAssignment_2() { return cRepresentsAssignment_2; }
		
		//STRING
		public RuleCall getRepresentsSTRINGTerminalRuleCall_2_0() { return cRepresentsSTRINGTerminalRuleCall_2_0; }
		
		//properties=ModelProperties?
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//ModelProperties
		public RuleCall getPropertiesModelPropertiesParserRuleCall_3_0() { return cPropertiesModelPropertiesParserRuleCall_3_0; }
		
		//elements+=GraphicalElement*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//GraphicalElement
		public RuleCall getElementsGraphicalElementParserRuleCall_4_0() { return cElementsGraphicalElementParserRuleCall_4_0; }
	}
	public class SemanticModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.SemanticModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//SemanticModel:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class ModelPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.ModelProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cPropertiesKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cPropertiesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cViewportKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cViewportKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cPointAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPointPointParserRuleCall_2_0 = (RuleCall)cPointAssignment_2.eContents().get(0);
		private final Keyword cZoomKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cZoomAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cZoomINTTerminalRuleCall_4_0 = (RuleCall)cZoomAssignment_4.eContents().get(0);
		
		//ModelProperties:
		//	('properties' ':' | 'properties:') ('viewport' ':' | 'viewport:') point=Point
		//	'zoom' zoom=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//('properties' ':' | 'properties:') ('viewport' ':' | 'viewport:') point=Point 'zoom' zoom=INT
		public Group getGroup() { return cGroup; }
		
		//('properties' ':' | 'properties:')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'properties' ':'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'properties'
		public Keyword getPropertiesKeyword_0_0_0() { return cPropertiesKeyword_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//'properties:'
		public Keyword getPropertiesKeyword_0_1() { return cPropertiesKeyword_0_1; }
		
		//('viewport' ':' | 'viewport:')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'viewport' ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'viewport'
		public Keyword getViewportKeyword_1_0_0() { return cViewportKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//'viewport:'
		public Keyword getViewportKeyword_1_1() { return cViewportKeyword_1_1; }
		
		//point=Point
		public Assignment getPointAssignment_2() { return cPointAssignment_2; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_2_0() { return cPointPointParserRuleCall_2_0; }
		
		//'zoom'
		public Keyword getZoomKeyword_3() { return cZoomKeyword_3; }
		
		//zoom=INT
		public Assignment getZoomAssignment_4() { return cZoomAssignment_4; }
		
		//INT
		public RuleCall getZoomINTTerminalRuleCall_4_0() { return cZoomINTTerminalRuleCall_4_0; }
	}
	public class GraphicalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.GraphicalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShapesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatingTextsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectorsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GraphicalElement:
		//	Shapes | FloatingTexts | Connectors;
		@Override public ParserRule getRule() { return rule; }
		
		//Shapes | FloatingTexts | Connectors
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Shapes
		public RuleCall getShapesParserRuleCall_0() { return cShapesParserRuleCall_0; }
		
		//FloatingTexts
		public RuleCall getFloatingTextsParserRuleCall_1() { return cFloatingTextsParserRuleCall_1; }
		
		//Connectors
		public RuleCall getConnectorsParserRuleCall_2() { return cConnectorsParserRuleCall_2; }
	}
	public class ShapesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Shapes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapesAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cShapesKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cShapesKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cShapesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cShapesShapeParserRuleCall_2_0 = (RuleCall)cShapesAssignment_2.eContents().get(0);
		
		//Shapes:
		//	{Shapes} ('shapes' ':' | 'shapes:') shapes+=Shape*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Shapes} ('shapes' ':' | 'shapes:') shapes+=Shape*
		public Group getGroup() { return cGroup; }
		
		//{Shapes}
		public Action getShapesAction_0() { return cShapesAction_0; }
		
		//('shapes' ':' | 'shapes:')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'shapes' ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'shapes'
		public Keyword getShapesKeyword_1_0_0() { return cShapesKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//'shapes:'
		public Keyword getShapesKeyword_1_1() { return cShapesKeyword_1_1; }
		
		//shapes+=Shape*
		public Assignment getShapesAssignment_2() { return cShapesAssignment_2; }
		
		//Shape
		public RuleCall getShapesShapeParserRuleCall_2_0() { return cShapesShapeParserRuleCall_2_0; }
	}
	public class ShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Shape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cShapeKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cShapeKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPropsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropsShapePropsParserRuleCall_3_0 = (RuleCall)cPropsAssignment_3.eContents().get(0);
		private final Assignment cRectAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRectRectangleParserRuleCall_4_0 = (RuleCall)cRectAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cRenderKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cColonKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Keyword cRenderKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Assignment cRepresentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRepresentsSTRINGTerminalRuleCall_6_0 = (RuleCall)cRepresentsAssignment_6.eContents().get(0);
		
		//Shape:
		//	{Shape} ('shape' ':' | 'shape:') name=ID props=ShapeProps? rect=Rectangle ('render' ':' | 'render:')
		//	represents=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{Shape} ('shape' ':' | 'shape:') name=ID props=ShapeProps? rect=Rectangle ('render' ':' | 'render:') represents=STRING
		public Group getGroup() { return cGroup; }
		
		//{Shape}
		public Action getShapeAction_0() { return cShapeAction_0; }
		
		//('shape' ':' | 'shape:')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'shape' ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'shape'
		public Keyword getShapeKeyword_1_0_0() { return cShapeKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//'shape:'
		public Keyword getShapeKeyword_1_1() { return cShapeKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//props=ShapeProps?
		public Assignment getPropsAssignment_3() { return cPropsAssignment_3; }
		
		//ShapeProps
		public RuleCall getPropsShapePropsParserRuleCall_3_0() { return cPropsShapePropsParserRuleCall_3_0; }
		
		//rect=Rectangle
		public Assignment getRectAssignment_4() { return cRectAssignment_4; }
		
		//Rectangle
		public RuleCall getRectRectangleParserRuleCall_4_0() { return cRectRectangleParserRuleCall_4_0; }
		
		//('render' ':' | 'render:')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'render' ':'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'render'
		public Keyword getRenderKeyword_5_0_0() { return cRenderKeyword_5_0_0; }
		
		//':'
		public Keyword getColonKeyword_5_0_1() { return cColonKeyword_5_0_1; }
		
		//'render:'
		public Keyword getRenderKeyword_5_1() { return cRenderKeyword_5_1; }
		
		//represents=STRING
		public Assignment getRepresentsAssignment_6() { return cRepresentsAssignment_6; }
		
		//STRING
		public RuleCall getRepresentsSTRINGTerminalRuleCall_6_0() { return cRepresentsSTRINGTerminalRuleCall_6_0; }
	}
	public class FloatingTextsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.FloatingTexts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatingTextsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cTextsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cTextsKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cTextsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextsFloatingTextParserRuleCall_2_0 = (RuleCall)cTextsAssignment_2.eContents().get(0);
		
		//FloatingTexts:
		//	{FloatingTexts} ('texts' ':' | 'texts:') texts+=FloatingText*;
		@Override public ParserRule getRule() { return rule; }
		
		//{FloatingTexts} ('texts' ':' | 'texts:') texts+=FloatingText*
		public Group getGroup() { return cGroup; }
		
		//{FloatingTexts}
		public Action getFloatingTextsAction_0() { return cFloatingTextsAction_0; }
		
		//('texts' ':' | 'texts:')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'texts' ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'texts'
		public Keyword getTextsKeyword_1_0_0() { return cTextsKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//'texts:'
		public Keyword getTextsKeyword_1_1() { return cTextsKeyword_1_1; }
		
		//texts+=FloatingText*
		public Assignment getTextsAssignment_2() { return cTextsAssignment_2; }
		
		//FloatingText
		public RuleCall getTextsFloatingTextParserRuleCall_2_0() { return cTextsFloatingTextParserRuleCall_2_0; }
	}
	public class FloatingTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.FloatingText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatingTextAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cTextKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cTextKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cRectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRectRectangleParserRuleCall_2_0 = (RuleCall)cRectAssignment_2.eContents().get(0);
		private final Assignment cAssociatedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cAssociatedAlternatives_3_0 = (Alternatives)cAssociatedAssignment_3.eContents().get(0);
		private final RuleCall cAssociatedShapeParserRuleCall_3_0_0 = (RuleCall)cAssociatedAlternatives_3_0.eContents().get(0);
		private final RuleCall cAssociatedConnectorParserRuleCall_3_0_1 = (RuleCall)cAssociatedAlternatives_3_0.eContents().get(1);
		
		//FloatingText:
		//	{FloatingText} ('text' ':' | 'text:') rect=Rectangle
		//	associated=(Shape | Connector);
		@Override public ParserRule getRule() { return rule; }
		
		//{FloatingText} ('text' ':' | 'text:') rect=Rectangle associated=(Shape | Connector)
		public Group getGroup() { return cGroup; }
		
		//{FloatingText}
		public Action getFloatingTextAction_0() { return cFloatingTextAction_0; }
		
		//('text' ':' | 'text:')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'text' ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'text'
		public Keyword getTextKeyword_1_0_0() { return cTextKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//'text:'
		public Keyword getTextKeyword_1_1() { return cTextKeyword_1_1; }
		
		//rect=Rectangle
		public Assignment getRectAssignment_2() { return cRectAssignment_2; }
		
		//Rectangle
		public RuleCall getRectRectangleParserRuleCall_2_0() { return cRectRectangleParserRuleCall_2_0; }
		
		//associated=(Shape | Connector)
		public Assignment getAssociatedAssignment_3() { return cAssociatedAssignment_3; }
		
		//(Shape | Connector)
		public Alternatives getAssociatedAlternatives_3_0() { return cAssociatedAlternatives_3_0; }
		
		//Shape
		public RuleCall getAssociatedShapeParserRuleCall_3_0_0() { return cAssociatedShapeParserRuleCall_3_0_0; }
		
		//Connector
		public RuleCall getAssociatedConnectorParserRuleCall_3_0_1() { return cAssociatedConnectorParserRuleCall_3_0_1; }
	}
	public class ShapePropsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.ShapeProps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapePropsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cPropertiesKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cPropertiesKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cContainerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContainerContainerParserRuleCall_2_0 = (RuleCall)cContainerAssignment_2.eContents().get(0);
		private final Assignment cColorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColorColorParserRuleCall_3_0 = (RuleCall)cColorAssignment_3.eContents().get(0);
		
		//ShapeProps:
		//	{ShapeProps} ('properties' ':' | 'properties:') container=Container?
		//	color=Color?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeProps} ('properties' ':' | 'properties:') container=Container? color=Color?
		public Group getGroup() { return cGroup; }
		
		//{ShapeProps}
		public Action getShapePropsAction_0() { return cShapePropsAction_0; }
		
		//('properties' ':' | 'properties:')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'properties' ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'properties'
		public Keyword getPropertiesKeyword_1_0_0() { return cPropertiesKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//'properties:'
		public Keyword getPropertiesKeyword_1_1() { return cPropertiesKeyword_1_1; }
		
		//container=Container?
		public Assignment getContainerAssignment_2() { return cContainerAssignment_2; }
		
		//Container
		public RuleCall getContainerContainerParserRuleCall_2_0() { return cContainerContainerParserRuleCall_2_0; }
		
		//color=Color?
		public Assignment getColorAssignment_3() { return cColorAssignment_3; }
		
		//Color
		public RuleCall getColorColorParserRuleCall_3_0() { return cColorColorParserRuleCall_3_0; }
	}
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShapeContainerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cTrueKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cFalseKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//Container:
		//	{ShapeContainer} 'container' ('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{ShapeContainer} 'container' ('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{ShapeContainer}
		public Action getShapeContainerAction_0() { return cShapeContainerAction_0; }
		
		//'container'
		public Keyword getContainerKeyword_1() { return cContainerKeyword_1; }
		
		//('true' | 'false')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'true'
		public Keyword getTrueKeyword_2_0() { return cTrueKeyword_2_0; }
		
		//'false'
		public Keyword getFalseKeyword_2_1() { return cFalseKeyword_2_1; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRINTTerminalRuleCall_1_0 = (RuleCall)cRAssignment_1.eContents().get(0);
		private final Assignment cGAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGINTTerminalRuleCall_2_0 = (RuleCall)cGAssignment_2.eContents().get(0);
		private final Assignment cBAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBINTTerminalRuleCall_3_0 = (RuleCall)cBAssignment_3.eContents().get(0);
		
		//Color:
		//	'color' r=INT g=INT b=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'color' r=INT g=INT b=INT
		public Group getGroup() { return cGroup; }
		
		//'color'
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }
		
		//r=INT
		public Assignment getRAssignment_1() { return cRAssignment_1; }
		
		//INT
		public RuleCall getRINTTerminalRuleCall_1_0() { return cRINTTerminalRuleCall_1_0; }
		
		//g=INT
		public Assignment getGAssignment_2() { return cGAssignment_2; }
		
		//INT
		public RuleCall getGINTTerminalRuleCall_2_0() { return cGINTTerminalRuleCall_2_0; }
		
		//b=INT
		public Assignment getBAssignment_3() { return cBAssignment_3; }
		
		//INT
		public RuleCall getBINTTerminalRuleCall_3_0() { return cBINTTerminalRuleCall_3_0; }
	}
	public class ConnectorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Connectors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConnectorsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cConnectorsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cConnectorsKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cConnectorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConnectorsConnectorParserRuleCall_2_0 = (RuleCall)cConnectorsAssignment_2.eContents().get(0);
		
		//Connectors:
		//	{Connectors} ('connectors' ':' | 'connectors:') connectors+=Connector*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Connectors} ('connectors' ':' | 'connectors:') connectors+=Connector*
		public Group getGroup() { return cGroup; }
		
		//{Connectors}
		public Action getConnectorsAction_0() { return cConnectorsAction_0; }
		
		//('connectors' ':' | 'connectors:')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'connectors' ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'connectors'
		public Keyword getConnectorsKeyword_1_0_0() { return cConnectorsKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//'connectors:'
		public Keyword getConnectorsKeyword_1_1() { return cConnectorsKeyword_1_1; }
		
		//connectors+=Connector*
		public Assignment getConnectorsAssignment_2() { return cConnectorsAssignment_2; }
		
		//Connector
		public RuleCall getConnectorsConnectorParserRuleCall_2_0() { return cConnectorsConnectorParserRuleCall_2_0; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cConnectorKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cConnectorKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPropsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropsConnectorPropsParserRuleCall_2_0 = (RuleCall)cPropsAssignment_2.eContents().get(0);
		private final Assignment cPolylineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPolylinePolylineParserRuleCall_3_0 = (RuleCall)cPolylineAssignment_3.eContents().get(0);
		private final Assignment cAnchorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnchorsAnchorsParserRuleCall_4_0 = (RuleCall)cAnchorsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cRenderKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cColonKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Keyword cRenderKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Assignment cRepresentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRepresentsSTRINGTerminalRuleCall_6_0 = (RuleCall)cRepresentsAssignment_6.eContents().get(0);
		
		//Connector:
		//	('connector' ':' | 'connector:') name=ID props=ConnectorProps? polyline=Polyline?
		//	anchors=Anchors? ('render' ':' | 'render:') represents=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//('connector' ':' | 'connector:') name=ID props=ConnectorProps? polyline=Polyline? anchors=Anchors? ('render' ':' |
		//'render:') represents=STRING
		public Group getGroup() { return cGroup; }
		
		//('connector' ':' | 'connector:')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'connector' ':'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'connector'
		public Keyword getConnectorKeyword_0_0_0() { return cConnectorKeyword_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//'connector:'
		public Keyword getConnectorKeyword_0_1() { return cConnectorKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//props=ConnectorProps?
		public Assignment getPropsAssignment_2() { return cPropsAssignment_2; }
		
		//ConnectorProps
		public RuleCall getPropsConnectorPropsParserRuleCall_2_0() { return cPropsConnectorPropsParserRuleCall_2_0; }
		
		//polyline=Polyline?
		public Assignment getPolylineAssignment_3() { return cPolylineAssignment_3; }
		
		//Polyline
		public RuleCall getPolylinePolylineParserRuleCall_3_0() { return cPolylinePolylineParserRuleCall_3_0; }
		
		//anchors=Anchors?
		public Assignment getAnchorsAssignment_4() { return cAnchorsAssignment_4; }
		
		//Anchors
		public RuleCall getAnchorsAnchorsParserRuleCall_4_0() { return cAnchorsAnchorsParserRuleCall_4_0; }
		
		//('render' ':' | 'render:')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'render' ':'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'render'
		public Keyword getRenderKeyword_5_0_0() { return cRenderKeyword_5_0_0; }
		
		//':'
		public Keyword getColonKeyword_5_0_1() { return cColonKeyword_5_0_1; }
		
		//'render:'
		public Keyword getRenderKeyword_5_1() { return cRenderKeyword_5_1; }
		
		//represents=STRING
		public Assignment getRepresentsAssignment_6() { return cRepresentsAssignment_6; }
		
		//STRING
		public RuleCall getRepresentsSTRINGTerminalRuleCall_6_0() { return cRepresentsSTRINGTerminalRuleCall_6_0; }
	}
	public class AnchorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Anchors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cAnchorsKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cAnchorsKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cStartAnchorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartAnchorStartAnchorParserRuleCall_1_0 = (RuleCall)cStartAnchorAssignment_1.eContents().get(0);
		private final Assignment cEndAnchorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndAnchorEndAnchorParserRuleCall_2_0 = (RuleCall)cEndAnchorAssignment_2.eContents().get(0);
		
		//Anchors:
		//	('anchors' ':' | 'anchors:') startAnchor=StartAnchor endAnchor=EndAnchor;
		@Override public ParserRule getRule() { return rule; }
		
		//('anchors' ':' | 'anchors:') startAnchor=StartAnchor endAnchor=EndAnchor
		public Group getGroup() { return cGroup; }
		
		//('anchors' ':' | 'anchors:')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'anchors' ':'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'anchors'
		public Keyword getAnchorsKeyword_0_0_0() { return cAnchorsKeyword_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//'anchors:'
		public Keyword getAnchorsKeyword_0_1() { return cAnchorsKeyword_0_1; }
		
		//startAnchor=StartAnchor
		public Assignment getStartAnchorAssignment_1() { return cStartAnchorAssignment_1; }
		
		//StartAnchor
		public RuleCall getStartAnchorStartAnchorParserRuleCall_1_0() { return cStartAnchorStartAnchorParserRuleCall_1_0; }
		
		//endAnchor=EndAnchor
		public Assignment getEndAnchorAssignment_2() { return cEndAnchorAssignment_2; }
		
		//EndAnchor
		public RuleCall getEndAnchorEndAnchorParserRuleCall_2_0() { return cEndAnchorEndAnchorParserRuleCall_2_0; }
	}
	public class StartAnchorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.StartAnchor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cStartKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cStartKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cPointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointPointParserRuleCall_1_0 = (RuleCall)cPointAssignment_1.eContents().get(0);
		private final Assignment cAnchorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnchorAnchorParserRuleCall_2_0 = (RuleCall)cAnchorAssignment_2.eContents().get(0);
		
		//StartAnchor:
		//	('start' ':' | 'start:') point=Point anchor=Anchor?;
		@Override public ParserRule getRule() { return rule; }
		
		//('start' ':' | 'start:') point=Point anchor=Anchor?
		public Group getGroup() { return cGroup; }
		
		//('start' ':' | 'start:')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'start' ':'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'start'
		public Keyword getStartKeyword_0_0_0() { return cStartKeyword_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//'start:'
		public Keyword getStartKeyword_0_1() { return cStartKeyword_0_1; }
		
		//point=Point
		public Assignment getPointAssignment_1() { return cPointAssignment_1; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_1_0() { return cPointPointParserRuleCall_1_0; }
		
		//anchor=Anchor?
		public Assignment getAnchorAssignment_2() { return cAnchorAssignment_2; }
		
		//Anchor
		public RuleCall getAnchorAnchorParserRuleCall_2_0() { return cAnchorAnchorParserRuleCall_2_0; }
	}
	public class EndAnchorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.EndAnchor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cEndKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cEndKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cPointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointPointParserRuleCall_1_0 = (RuleCall)cPointAssignment_1.eContents().get(0);
		private final Assignment cAnchorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnchorAnchorParserRuleCall_2_0 = (RuleCall)cAnchorAssignment_2.eContents().get(0);
		
		//EndAnchor:
		//	('end' ':' | 'end') point=Point anchor=Anchor?;
		@Override public ParserRule getRule() { return rule; }
		
		//('end' ':' | 'end') point=Point anchor=Anchor?
		public Group getGroup() { return cGroup; }
		
		//('end' ':' | 'end')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'end' ':'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'end'
		public Keyword getEndKeyword_0_0_0() { return cEndKeyword_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//'end'
		public Keyword getEndKeyword_0_1() { return cEndKeyword_0_1; }
		
		//point=Point
		public Assignment getPointAssignment_1() { return cPointAssignment_1; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_1_0() { return cPointPointParserRuleCall_1_0; }
		
		//anchor=Anchor?
		public Assignment getAnchorAssignment_2() { return cAnchorAssignment_2; }
		
		//Anchor
		public RuleCall getAnchorAnchorParserRuleCall_2_0() { return cAnchorAnchorParserRuleCall_2_0; }
	}
	public class AnchorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Anchor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShapeAnchorElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectorAnchorElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Anchor:
		//	ShapeAnchorElement | ConnectorAnchorElement;
		@Override public ParserRule getRule() { return rule; }
		
		//ShapeAnchorElement | ConnectorAnchorElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ShapeAnchorElement
		public RuleCall getShapeAnchorElementParserRuleCall_0() { return cShapeAnchorElementParserRuleCall_0; }
		
		//ConnectorAnchorElement
		public RuleCall getConnectorAnchorElementParserRuleCall_1() { return cConnectorAnchorElementParserRuleCall_1; }
	}
	public class ShapeAnchorElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.ShapeAnchorElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cShapeAnchorKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cShapeAnchorKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElementShapeCrossReference_1_0 = (CrossReference)cElementAssignment_1.eContents().get(0);
		private final RuleCall cElementShapeIDTerminalRuleCall_1_0_1 = (RuleCall)cElementShapeCrossReference_1_0.eContents().get(1);
		
		//ShapeAnchorElement:
		//	('shapeAnchor' ':' | 'shapeAnchor:') element=[Shape];
		@Override public ParserRule getRule() { return rule; }
		
		//('shapeAnchor' ':' | 'shapeAnchor:') element=[Shape]
		public Group getGroup() { return cGroup; }
		
		//('shapeAnchor' ':' | 'shapeAnchor:')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'shapeAnchor' ':'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'shapeAnchor'
		public Keyword getShapeAnchorKeyword_0_0_0() { return cShapeAnchorKeyword_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//'shapeAnchor:'
		public Keyword getShapeAnchorKeyword_0_1() { return cShapeAnchorKeyword_0_1; }
		
		//element=[Shape]
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//[Shape]
		public CrossReference getElementShapeCrossReference_1_0() { return cElementShapeCrossReference_1_0; }
		
		//ID
		public RuleCall getElementShapeIDTerminalRuleCall_1_0_1() { return cElementShapeIDTerminalRuleCall_1_0_1; }
	}
	public class ConnectorAnchorElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.ConnectorAnchorElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cSegmentAnchorKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cSegmentAnchorKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElementConnectorCrossReference_1_0 = (CrossReference)cElementAssignment_1.eContents().get(0);
		private final RuleCall cElementConnectorIDTerminalRuleCall_1_0_1 = (RuleCall)cElementConnectorCrossReference_1_0.eContents().get(1);
		
		//ConnectorAnchorElement:
		//	('segmentAnchor' ':' | 'segmentAnchor:') element=[Connector];
		@Override public ParserRule getRule() { return rule; }
		
		//('segmentAnchor' ':' | 'segmentAnchor:') element=[Connector]
		public Group getGroup() { return cGroup; }
		
		//('segmentAnchor' ':' | 'segmentAnchor:')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'segmentAnchor' ':'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'segmentAnchor'
		public Keyword getSegmentAnchorKeyword_0_0_0() { return cSegmentAnchorKeyword_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//'segmentAnchor:'
		public Keyword getSegmentAnchorKeyword_0_1() { return cSegmentAnchorKeyword_0_1; }
		
		//element=[Connector]
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//[Connector]
		public CrossReference getElementConnectorCrossReference_1_0() { return cElementConnectorCrossReference_1_0; }
		
		//ID
		public RuleCall getElementConnectorIDTerminalRuleCall_1_0_1() { return cElementConnectorIDTerminalRuleCall_1_0_1; }
	}
	public class ConnectorPropsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.ConnectorProps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConnectorPropsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cPropertiesKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cPropertiesKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorColorParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		
		//ConnectorProps:
		//	{ConnectorProps} ('properties' ':' | 'properties:') color=Color?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConnectorProps} ('properties' ':' | 'properties:') color=Color?
		public Group getGroup() { return cGroup; }
		
		//{ConnectorProps}
		public Action getConnectorPropsAction_0() { return cConnectorPropsAction_0; }
		
		//('properties' ':' | 'properties:')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'properties' ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'properties'
		public Keyword getPropertiesKeyword_1_0_0() { return cPropertiesKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//'properties:'
		public Keyword getPropertiesKeyword_1_1() { return cPropertiesKeyword_1_1; }
		
		//color=Color?
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }
		
		//Color
		public RuleCall getColorColorParserRuleCall_2_0() { return cColorColorParserRuleCall_2_0; }
	}
	public class PolylineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Polyline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPolylineAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cPolylineKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cPolylineKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cSegmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSegmentsSegmentParserRuleCall_2_0 = (RuleCall)cSegmentsAssignment_2.eContents().get(0);
		
		//Polyline:
		//	{Polyline} ('polyline' ':' | 'polyline:') segments+=Segment*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Polyline} ('polyline' ':' | 'polyline:') segments+=Segment*
		public Group getGroup() { return cGroup; }
		
		//{Polyline}
		public Action getPolylineAction_0() { return cPolylineAction_0; }
		
		//('polyline' ':' | 'polyline:')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'polyline' ':'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'polyline'
		public Keyword getPolylineKeyword_1_0_0() { return cPolylineKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//'polyline:'
		public Keyword getPolylineKeyword_1_1() { return cPolylineKeyword_1_1; }
		
		//segments+=Segment*
		public Assignment getSegmentsAssignment_2() { return cSegmentsAssignment_2; }
		
		//Segment
		public RuleCall getSegmentsSegmentParserRuleCall_2_0() { return cSegmentsSegmentParserRuleCall_2_0; }
	}
	public class SegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Segment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cSegmentKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cSegmentKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cStartPointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartPointPointParserRuleCall_1_0 = (RuleCall)cStartPointAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndPointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndPointPointParserRuleCall_3_0 = (RuleCall)cEndPointAssignment_3.eContents().get(0);
		
		//Segment:
		//	('segment' ':' | 'segment:') startPoint=Point ',' endPoint=Point;
		@Override public ParserRule getRule() { return rule; }
		
		//('segment' ':' | 'segment:') startPoint=Point ',' endPoint=Point
		public Group getGroup() { return cGroup; }
		
		//('segment' ':' | 'segment:')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'segment' ':'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'segment'
		public Keyword getSegmentKeyword_0_0_0() { return cSegmentKeyword_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//'segment:'
		public Keyword getSegmentKeyword_0_1() { return cSegmentKeyword_0_1; }
		
		//startPoint=Point
		public Assignment getStartPointAssignment_1() { return cStartPointAssignment_1; }
		
		//Point
		public RuleCall getStartPointPointParserRuleCall_1_0() { return cStartPointPointParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//endPoint=Point
		public Assignment getEndPointAssignment_3() { return cEndPointAssignment_3; }
		
		//Point
		public RuleCall getEndPointPointParserRuleCall_3_0() { return cEndPointPointParserRuleCall_3_0; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cYKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		
		//Point:
		//	'x' x=INT 'y' y=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'x' x=INT 'y' y=INT
		public Group getGroup() { return cGroup; }
		
		//'x'
		public Keyword getXKeyword_0() { return cXKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//'y'
		public Keyword getYKeyword_2() { return cYKeyword_2; }
		
		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }
	}
	public class RectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.canvas.language.Canvas.Rectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cRectangleKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cRectangleKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cYKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cWidthKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cWAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cWINTTerminalRuleCall_6_0 = (RuleCall)cWAssignment_6.eContents().get(0);
		private final Keyword cHeightKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cHAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHINTTerminalRuleCall_8_0 = (RuleCall)cHAssignment_8.eContents().get(0);
		
		//Rectangle:
		//	('rectangle' ':' | 'rectangle:')
		//	'x' x=INT
		//	'y' y=INT
		//	'width' w=INT
		//	'height' h=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//('rectangle' ':' | 'rectangle:') 'x' x=INT 'y' y=INT 'width' w=INT 'height' h=INT
		public Group getGroup() { return cGroup; }
		
		//('rectangle' ':' | 'rectangle:')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'rectangle' ':'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'rectangle'
		public Keyword getRectangleKeyword_0_0_0() { return cRectangleKeyword_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//'rectangle:'
		public Keyword getRectangleKeyword_0_1() { return cRectangleKeyword_0_1; }
		
		//'x'
		public Keyword getXKeyword_1() { return cXKeyword_1; }
		
		//x=INT
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_2_0() { return cXINTTerminalRuleCall_2_0; }
		
		//'y'
		public Keyword getYKeyword_3() { return cYKeyword_3; }
		
		//y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }
		
		//'width'
		public Keyword getWidthKeyword_5() { return cWidthKeyword_5; }
		
		//w=INT
		public Assignment getWAssignment_6() { return cWAssignment_6; }
		
		//INT
		public RuleCall getWINTTerminalRuleCall_6_0() { return cWINTTerminalRuleCall_6_0; }
		
		//'height'
		public Keyword getHeightKeyword_7() { return cHeightKeyword_7; }
		
		//h=INT
		public Assignment getHAssignment_8() { return cHAssignment_8; }
		
		//INT
		public RuleCall getHINTTerminalRuleCall_8_0() { return cHINTTerminalRuleCall_8_0; }
	}
	
	
	private final ModelElements pModel;
	private final SemanticModelElements pSemanticModel;
	private final ModelPropertiesElements pModelProperties;
	private final GraphicalElementElements pGraphicalElement;
	private final ShapesElements pShapes;
	private final ShapeElements pShape;
	private final FloatingTextsElements pFloatingTexts;
	private final FloatingTextElements pFloatingText;
	private final ShapePropsElements pShapeProps;
	private final ContainerElements pContainer;
	private final ColorElements pColor;
	private final ConnectorsElements pConnectors;
	private final ConnectorElements pConnector;
	private final AnchorsElements pAnchors;
	private final StartAnchorElements pStartAnchor;
	private final EndAnchorElements pEndAnchor;
	private final AnchorElements pAnchor;
	private final ShapeAnchorElementElements pShapeAnchorElement;
	private final ConnectorAnchorElementElements pConnectorAnchorElement;
	private final ConnectorPropsElements pConnectorProps;
	private final PolylineElements pPolyline;
	private final SegmentElements pSegment;
	private final PointElements pPoint;
	private final RectangleElements pRectangle;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CanvasGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSemanticModel = new SemanticModelElements();
		this.pModelProperties = new ModelPropertiesElements();
		this.pGraphicalElement = new GraphicalElementElements();
		this.pShapes = new ShapesElements();
		this.pShape = new ShapeElements();
		this.pFloatingTexts = new FloatingTextsElements();
		this.pFloatingText = new FloatingTextElements();
		this.pShapeProps = new ShapePropsElements();
		this.pContainer = new ContainerElements();
		this.pColor = new ColorElements();
		this.pConnectors = new ConnectorsElements();
		this.pConnector = new ConnectorElements();
		this.pAnchors = new AnchorsElements();
		this.pStartAnchor = new StartAnchorElements();
		this.pEndAnchor = new EndAnchorElements();
		this.pAnchor = new AnchorElements();
		this.pShapeAnchorElement = new ShapeAnchorElementElements();
		this.pConnectorAnchorElement = new ConnectorAnchorElementElements();
		this.pConnectorProps = new ConnectorPropsElements();
		this.pPolyline = new PolylineElements();
		this.pSegment = new SegmentElements();
		this.pPoint = new PointElements();
		this.pRectangle = new RectangleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtuml.canvas.language.Canvas".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	semantics+=SemanticModel* ('render' ':' | 'render:') represents=STRING
	//	properties=ModelProperties?
	//	elements+=GraphicalElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//SemanticModel:
	//	'import' importURI=STRING;
	public SemanticModelElements getSemanticModelAccess() {
		return pSemanticModel;
	}
	
	public ParserRule getSemanticModelRule() {
		return getSemanticModelAccess().getRule();
	}
	
	//ModelProperties:
	//	('properties' ':' | 'properties:') ('viewport' ':' | 'viewport:') point=Point
	//	'zoom' zoom=INT;
	public ModelPropertiesElements getModelPropertiesAccess() {
		return pModelProperties;
	}
	
	public ParserRule getModelPropertiesRule() {
		return getModelPropertiesAccess().getRule();
	}
	
	//GraphicalElement:
	//	Shapes | FloatingTexts | Connectors;
	public GraphicalElementElements getGraphicalElementAccess() {
		return pGraphicalElement;
	}
	
	public ParserRule getGraphicalElementRule() {
		return getGraphicalElementAccess().getRule();
	}
	
	//Shapes:
	//	{Shapes} ('shapes' ':' | 'shapes:') shapes+=Shape*;
	public ShapesElements getShapesAccess() {
		return pShapes;
	}
	
	public ParserRule getShapesRule() {
		return getShapesAccess().getRule();
	}
	
	//Shape:
	//	{Shape} ('shape' ':' | 'shape:') name=ID props=ShapeProps? rect=Rectangle ('render' ':' | 'render:')
	//	represents=STRING;
	public ShapeElements getShapeAccess() {
		return pShape;
	}
	
	public ParserRule getShapeRule() {
		return getShapeAccess().getRule();
	}
	
	//FloatingTexts:
	//	{FloatingTexts} ('texts' ':' | 'texts:') texts+=FloatingText*;
	public FloatingTextsElements getFloatingTextsAccess() {
		return pFloatingTexts;
	}
	
	public ParserRule getFloatingTextsRule() {
		return getFloatingTextsAccess().getRule();
	}
	
	//FloatingText:
	//	{FloatingText} ('text' ':' | 'text:') rect=Rectangle
	//	associated=(Shape | Connector);
	public FloatingTextElements getFloatingTextAccess() {
		return pFloatingText;
	}
	
	public ParserRule getFloatingTextRule() {
		return getFloatingTextAccess().getRule();
	}
	
	//ShapeProps:
	//	{ShapeProps} ('properties' ':' | 'properties:') container=Container?
	//	color=Color?;
	public ShapePropsElements getShapePropsAccess() {
		return pShapeProps;
	}
	
	public ParserRule getShapePropsRule() {
		return getShapePropsAccess().getRule();
	}
	
	//Container:
	//	{ShapeContainer} 'container' ('true' | 'false');
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//Color:
	//	'color' r=INT g=INT b=INT;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//Connectors:
	//	{Connectors} ('connectors' ':' | 'connectors:') connectors+=Connector*;
	public ConnectorsElements getConnectorsAccess() {
		return pConnectors;
	}
	
	public ParserRule getConnectorsRule() {
		return getConnectorsAccess().getRule();
	}
	
	//Connector:
	//	('connector' ':' | 'connector:') name=ID props=ConnectorProps? polyline=Polyline?
	//	anchors=Anchors? ('render' ':' | 'render:') represents=STRING;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//Anchors:
	//	('anchors' ':' | 'anchors:') startAnchor=StartAnchor endAnchor=EndAnchor;
	public AnchorsElements getAnchorsAccess() {
		return pAnchors;
	}
	
	public ParserRule getAnchorsRule() {
		return getAnchorsAccess().getRule();
	}
	
	//StartAnchor:
	//	('start' ':' | 'start:') point=Point anchor=Anchor?;
	public StartAnchorElements getStartAnchorAccess() {
		return pStartAnchor;
	}
	
	public ParserRule getStartAnchorRule() {
		return getStartAnchorAccess().getRule();
	}
	
	//EndAnchor:
	//	('end' ':' | 'end') point=Point anchor=Anchor?;
	public EndAnchorElements getEndAnchorAccess() {
		return pEndAnchor;
	}
	
	public ParserRule getEndAnchorRule() {
		return getEndAnchorAccess().getRule();
	}
	
	//Anchor:
	//	ShapeAnchorElement | ConnectorAnchorElement;
	public AnchorElements getAnchorAccess() {
		return pAnchor;
	}
	
	public ParserRule getAnchorRule() {
		return getAnchorAccess().getRule();
	}
	
	//ShapeAnchorElement:
	//	('shapeAnchor' ':' | 'shapeAnchor:') element=[Shape];
	public ShapeAnchorElementElements getShapeAnchorElementAccess() {
		return pShapeAnchorElement;
	}
	
	public ParserRule getShapeAnchorElementRule() {
		return getShapeAnchorElementAccess().getRule();
	}
	
	//ConnectorAnchorElement:
	//	('segmentAnchor' ':' | 'segmentAnchor:') element=[Connector];
	public ConnectorAnchorElementElements getConnectorAnchorElementAccess() {
		return pConnectorAnchorElement;
	}
	
	public ParserRule getConnectorAnchorElementRule() {
		return getConnectorAnchorElementAccess().getRule();
	}
	
	//ConnectorProps:
	//	{ConnectorProps} ('properties' ':' | 'properties:') color=Color?;
	public ConnectorPropsElements getConnectorPropsAccess() {
		return pConnectorProps;
	}
	
	public ParserRule getConnectorPropsRule() {
		return getConnectorPropsAccess().getRule();
	}
	
	//Polyline:
	//	{Polyline} ('polyline' ':' | 'polyline:') segments+=Segment*;
	public PolylineElements getPolylineAccess() {
		return pPolyline;
	}
	
	public ParserRule getPolylineRule() {
		return getPolylineAccess().getRule();
	}
	
	//Segment:
	//	('segment' ':' | 'segment:') startPoint=Point ',' endPoint=Point;
	public SegmentElements getSegmentAccess() {
		return pSegment;
	}
	
	public ParserRule getSegmentRule() {
		return getSegmentAccess().getRule();
	}
	
	//Point:
	//	'x' x=INT 'y' y=INT;
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//Rectangle:
	//	('rectangle' ':' | 'rectangle:')
	//	'x' x=INT
	//	'y' y=INT
	//	'width' w=INT
	//	'height' h=INT;
	public RectangleElements getRectangleAccess() {
		return pRectangle;
	}
	
	public ParserRule getRectangleRule() {
		return getRectangleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
