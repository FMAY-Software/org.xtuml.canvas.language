/*
 * generated by Xtext 2.22.0
 */
grammar InternalCanvas;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtuml.canvas.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtuml.canvas.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtuml.canvas.language.services.CanvasGrammarAccess;

}

@parser::members {

 	private CanvasGrammarAccess grammarAccess;

    public InternalCanvasParser(TokenStream input, CanvasGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CanvasGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getRenderModelRenderParserRuleCall_0_0());
				}
				lv_render_0_0=ruleModelRender
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"render",
						lv_render_0_0,
						"org.xtuml.canvas.language.Canvas.ModelRender");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPropertiesModelPropertiesParserRuleCall_1_0());
				}
				lv_properties_1_0=ruleModelProperties
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"properties",
						lv_properties_1_0,
						"org.xtuml.canvas.language.Canvas.ModelProperties");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementsGraphicalElementParserRuleCall_2_0());
				}
				lv_elements_2_0=ruleGraphicalElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"elements",
						lv_elements_2_0,
						"org.xtuml.canvas.language.Canvas.GraphicalElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleModelRender
entryRuleModelRender returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRenderRule()); }
	iv_ruleModelRender=ruleModelRender
	{ $current=$iv_ruleModelRender.current; }
	EOF;

// Rule ModelRender
ruleModelRender returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='render'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelRenderAccess().getRenderKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelRenderAccess().getColonKeyword_1());
		}
		(
			(
				lv_importURI_2_0=RULE_STRING
				{
					newLeafNode(lv_importURI_2_0, grammarAccess.getModelRenderAccess().getImportURISTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRenderRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleModelProperties
entryRuleModelProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelPropertiesRule()); }
	iv_ruleModelProperties=ruleModelProperties
	{ $current=$iv_ruleModelProperties.current; }
	EOF;

// Rule ModelProperties
ruleModelProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='properties'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelPropertiesAccess().getPropertiesKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelPropertiesAccess().getColonKeyword_1());
		}
		otherlv_2='viewport'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelPropertiesAccess().getViewportKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getModelPropertiesAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelPropertiesAccess().getPointPointParserRuleCall_4_0());
				}
				lv_point_4_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelPropertiesRule());
					}
					set(
						$current,
						"point",
						lv_point_4_0,
						"org.xtuml.canvas.language.Canvas.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='zoom'
		{
			newLeafNode(otherlv_5, grammarAccess.getModelPropertiesAccess().getZoomKeyword_5());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getModelPropertiesAccess().getColonKeyword_6());
		}
		(
			(
				lv_zoom_7_0=RULE_INT
				{
					newLeafNode(lv_zoom_7_0, grammarAccess.getModelPropertiesAccess().getZoomINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelPropertiesRule());
					}
					setWithLastConsumed(
						$current,
						"zoom",
						lv_zoom_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleGraphicalElement
entryRuleGraphicalElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphicalElementRule()); }
	iv_ruleGraphicalElement=ruleGraphicalElement
	{ $current=$iv_ruleGraphicalElement.current; }
	EOF;

// Rule GraphicalElement
ruleGraphicalElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGraphicalElementAccess().getShapesParserRuleCall_0());
		}
		this_Shapes_0=ruleShapes
		{
			$current = $this_Shapes_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphicalElementAccess().getConnectorsParserRuleCall_1());
		}
		this_Connectors_1=ruleConnectors
		{
			$current = $this_Connectors_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleShapes
entryRuleShapes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapesRule()); }
	iv_ruleShapes=ruleShapes
	{ $current=$iv_ruleShapes.current; }
	EOF;

// Rule Shapes
ruleShapes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapesAccess().getShapesAction_0(),
					$current);
			}
		)
		otherlv_1='shapes'
		{
			newLeafNode(otherlv_1, grammarAccess.getShapesAccess().getShapesKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getShapesAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getShapesAccess().getShapesShapeParserRuleCall_3_0());
				}
				lv_shapes_3_0=ruleShape
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapesRule());
					}
					add(
						$current,
						"shapes",
						lv_shapes_3_0,
						"org.xtuml.canvas.language.Canvas.Shape");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleShape
entryRuleShape returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeRule()); }
	iv_ruleShape=ruleShape
	{ $current=$iv_ruleShape.current; }
	EOF;

// Rule Shape
ruleShape returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapeAccess().getShapeAction_0(),
					$current);
			}
		)
		otherlv_1='shape'
		{
			newLeafNode(otherlv_1, grammarAccess.getShapeAccess().getShapeKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getShapeAccess().getColonKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getShapeAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShapeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeAccess().getContainerContainerParserRuleCall_4_0());
				}
				lv_container_4_0=ruleContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeRule());
					}
					set(
						$current,
						"container",
						lv_container_4_0,
						"org.xtuml.canvas.language.Canvas.Container");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='render'
		{
			newLeafNode(otherlv_5, grammarAccess.getShapeAccess().getRenderKeyword_5());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getShapeAccess().getColonKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeAccess().getTypeTypeLabelParserRuleCall_7_0());
				}
				lv_type_7_0=ruleTypeLabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeRule());
					}
					set(
						$current,
						"type",
						lv_type_7_0,
						"org.xtuml.canvas.language.Canvas.TypeLabel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_represents_8_0=RULE_STRING
				{
					newLeafNode(lv_represents_8_0, grammarAccess.getShapeAccess().getRepresentsSTRINGTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShapeRule());
					}
					setWithLastConsumed(
						$current,
						"represents",
						lv_represents_8_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeAccess().getBoundsBoundsParserRuleCall_9_0());
				}
				lv_bounds_9_0=ruleBounds
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeRule());
					}
					set(
						$current,
						"bounds",
						lv_bounds_9_0,
						"org.xtuml.canvas.language.Canvas.Bounds");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeAccess().getTextFloatingTextParserRuleCall_10_0());
				}
				lv_text_10_0=ruleFloatingText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeRule());
					}
					set(
						$current,
						"text",
						lv_text_10_0,
						"org.xtuml.canvas.language.Canvas.FloatingText");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleContainer
entryRuleContainer returns [String current=null]:
	{ newCompositeNode(grammarAccess.getContainerRule()); }
	iv_ruleContainer=ruleContainer
	{ $current=$iv_ruleContainer.current.getText(); }
	EOF;

// Rule Container
ruleContainer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='container'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getContainerAccess().getContainerKeyword());
	}
;

// Entry rule entryRuleFloatingTexts
entryRuleFloatingTexts returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatingTextsRule()); }
	iv_ruleFloatingTexts=ruleFloatingTexts
	{ $current=$iv_ruleFloatingTexts.current; }
	EOF;

// Rule FloatingTexts
ruleFloatingTexts returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFloatingTextsAccess().getFloatingTextsAction_0(),
					$current);
			}
		)
		otherlv_1='texts'
		{
			newLeafNode(otherlv_1, grammarAccess.getFloatingTextsAccess().getTextsKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFloatingTextsAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatingTextsAccess().getTextsFloatingTextParserRuleCall_3_0());
				}
				lv_texts_3_0=ruleFloatingText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatingTextsRule());
					}
					add(
						$current,
						"texts",
						lv_texts_3_0,
						"org.xtuml.canvas.language.Canvas.FloatingText");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFloatingText
entryRuleFloatingText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatingTextRule()); }
	iv_ruleFloatingText=ruleFloatingText
	{ $current=$iv_ruleFloatingText.current; }
	EOF;

// Rule FloatingText
ruleFloatingText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFloatingTextAccess().getFloatingTextAction_0(),
					$current);
			}
		)
		otherlv_1='text'
		{
			newLeafNode(otherlv_1, grammarAccess.getFloatingTextAccess().getTextKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFloatingTextAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatingTextAccess().getBoundsBoundsParserRuleCall_3_0());
				}
				lv_bounds_3_0=ruleBounds
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatingTextRule());
					}
					set(
						$current,
						"bounds",
						lv_bounds_3_0,
						"org.xtuml.canvas.language.Canvas.Bounds");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatingTextAccess().getEndEnumEndParserRuleCall_4_0());
				}
				lv_end_4_0=ruleEnumEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatingTextRule());
					}
					set(
						$current,
						"end",
						lv_end_4_0,
						"org.xtuml.canvas.language.Canvas.EnumEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEnumEnd
entryRuleEnumEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumEndRule()); }
	iv_ruleEnumEnd=ruleEnumEnd
	{ $current=$iv_ruleEnumEnd.current; }
	EOF;

// Rule EnumEnd
ruleEnumEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='where'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumEndAccess().getWhereKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumEndAccess().getColonKeyword_1());
		}
		(
			(
				(
					lv_where_2_1='start'
					{
						newLeafNode(lv_where_2_1, grammarAccess.getEnumEndAccess().getWhereStartKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_2_1, null);
					}
					    |
					lv_where_2_2='end'
					{
						newLeafNode(lv_where_2_2, grammarAccess.getEnumEndAccess().getWhereEndKeyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_2_2, null);
					}
					    |
					lv_where_2_3='middle'
					{
						newLeafNode(lv_where_2_3, grammarAccess.getEnumEndAccess().getWhereMiddleKeyword_2_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_2_3, null);
					}
					    |
					lv_where_2_4='end_fixed'
					{
						newLeafNode(lv_where_2_4, grammarAccess.getEnumEndAccess().getWhereEnd_fixedKeyword_2_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_2_4, null);
					}
					    |
					lv_where_2_5='start_fixed'
					{
						newLeafNode(lv_where_2_5, grammarAccess.getEnumEndAccess().getWhereStart_fixedKeyword_2_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_2_5, null);
					}
					    |
					lv_where_2_6='none'
					{
						newLeafNode(lv_where_2_6, grammarAccess.getEnumEndAccess().getWhereNoneKeyword_2_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_2_6, null);
					}
					    |
					lv_where_2_7='floating'
					{
						newLeafNode(lv_where_2_7, grammarAccess.getEnumEndAccess().getWhereFloatingKeyword_2_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_2_7, null);
					}
					    |
					lv_where_2_8='additional'
					{
						newLeafNode(lv_where_2_8, grammarAccess.getEnumEndAccess().getWhereAdditionalKeyword_2_0_7());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_2_8, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleConnectors
entryRuleConnectors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorsRule()); }
	iv_ruleConnectors=ruleConnectors
	{ $current=$iv_ruleConnectors.current; }
	EOF;

// Rule Connectors
ruleConnectors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConnectorsAccess().getConnectorsAction_0(),
					$current);
			}
		)
		otherlv_1='connectors'
		{
			newLeafNode(otherlv_1, grammarAccess.getConnectorsAccess().getConnectorsKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getConnectorsAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorsAccess().getConnectorsConnectorParserRuleCall_3_0());
				}
				lv_connectors_3_0=ruleConnector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorsRule());
					}
					add(
						$current,
						"connectors",
						lv_connectors_3_0,
						"org.xtuml.canvas.language.Canvas.Connector");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConnector
entryRuleConnector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorRule()); }
	iv_ruleConnector=ruleConnector
	{ $current=$iv_ruleConnector.current; }
	EOF;

// Rule Connector
ruleConnector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='connector'
		{
			newLeafNode(otherlv_0, grammarAccess.getConnectorAccess().getConnectorKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getConnectorAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getConnectorAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='render'
		{
			newLeafNode(otherlv_3, grammarAccess.getConnectorAccess().getRenderKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getConnectorAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getTypeTypeLabelParserRuleCall_5_0());
				}
				lv_type_5_0=ruleTypeLabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorRule());
					}
					set(
						$current,
						"type",
						lv_type_5_0,
						"org.xtuml.canvas.language.Canvas.TypeLabel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_represents_6_0=RULE_STRING
				{
					newLeafNode(lv_represents_6_0, grammarAccess.getConnectorAccess().getRepresentsSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectorRule());
					}
					setWithLastConsumed(
						$current,
						"represents",
						lv_represents_6_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getPolylinePolylineParserRuleCall_7_0());
				}
				lv_polyline_7_0=rulePolyline
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorRule());
					}
					set(
						$current,
						"polyline",
						lv_polyline_7_0,
						"org.xtuml.canvas.language.Canvas.Polyline");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getAnchorsAnchorsParserRuleCall_8_0());
				}
				lv_anchors_8_0=ruleAnchors
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorRule());
					}
					set(
						$current,
						"anchors",
						lv_anchors_8_0,
						"org.xtuml.canvas.language.Canvas.Anchors");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getTextsFloatingTextsParserRuleCall_9_0());
				}
				lv_texts_9_0=ruleFloatingTexts
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorRule());
					}
					set(
						$current,
						"texts",
						lv_texts_9_0,
						"org.xtuml.canvas.language.Canvas.FloatingTexts");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAnchors
entryRuleAnchors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnchorsRule()); }
	iv_ruleAnchors=ruleAnchors
	{ $current=$iv_ruleAnchors.current; }
	EOF;

// Rule Anchors
ruleAnchors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='anchors'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnchorsAccess().getAnchorsKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAnchorsAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnchorsAccess().getStartAnchorStartAnchorParserRuleCall_2_0());
				}
				lv_startAnchor_2_0=ruleStartAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnchorsRule());
					}
					set(
						$current,
						"startAnchor",
						lv_startAnchor_2_0,
						"org.xtuml.canvas.language.Canvas.StartAnchor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnchorsAccess().getEndAnchorEndAnchorParserRuleCall_3_0());
				}
				lv_endAnchor_3_0=ruleEndAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnchorsRule());
					}
					set(
						$current,
						"endAnchor",
						lv_endAnchor_3_0,
						"org.xtuml.canvas.language.Canvas.EndAnchor");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStartAnchor
entryRuleStartAnchor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartAnchorRule()); }
	iv_ruleStartAnchor=ruleStartAnchor
	{ $current=$iv_ruleStartAnchor.current; }
	EOF;

// Rule StartAnchor
ruleStartAnchor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='start'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartAnchorAccess().getStartKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getStartAnchorAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartAnchorAccess().getPointPointDefinitionParserRuleCall_2_0());
				}
				lv_point_2_0=rulePointDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartAnchorRule());
					}
					set(
						$current,
						"point",
						lv_point_2_0,
						"org.xtuml.canvas.language.Canvas.PointDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStartAnchorAccess().getAnchorAnchorParserRuleCall_3_0());
				}
				lv_anchor_3_0=ruleAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartAnchorRule());
					}
					set(
						$current,
						"anchor",
						lv_anchor_3_0,
						"org.xtuml.canvas.language.Canvas.Anchor");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleEndAnchor
entryRuleEndAnchor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndAnchorRule()); }
	iv_ruleEndAnchor=ruleEndAnchor
	{ $current=$iv_ruleEndAnchor.current; }
	EOF;

// Rule EndAnchor
ruleEndAnchor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='end'
		{
			newLeafNode(otherlv_0, grammarAccess.getEndAnchorAccess().getEndKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getEndAnchorAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEndAnchorAccess().getPointPointDefinitionParserRuleCall_2_0());
				}
				lv_point_2_0=rulePointDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndAnchorRule());
					}
					set(
						$current,
						"point",
						lv_point_2_0,
						"org.xtuml.canvas.language.Canvas.PointDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEndAnchorAccess().getAnchorAnchorParserRuleCall_3_0());
				}
				lv_anchor_3_0=ruleAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndAnchorRule());
					}
					set(
						$current,
						"anchor",
						lv_anchor_3_0,
						"org.xtuml.canvas.language.Canvas.Anchor");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAnchor
entryRuleAnchor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnchorRule()); }
	iv_ruleAnchor=ruleAnchor
	{ $current=$iv_ruleAnchor.current; }
	EOF;

// Rule Anchor
ruleAnchor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAnchorAccess().getShapeAnchorElementParserRuleCall_0());
		}
		this_ShapeAnchorElement_0=ruleShapeAnchorElement
		{
			$current = $this_ShapeAnchorElement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAnchorAccess().getConnectorAnchorElementParserRuleCall_1());
		}
		this_ConnectorAnchorElement_1=ruleConnectorAnchorElement
		{
			$current = $this_ConnectorAnchorElement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleShapeAnchorElement
entryRuleShapeAnchorElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeAnchorElementRule()); }
	iv_ruleShapeAnchorElement=ruleShapeAnchorElement
	{ $current=$iv_ruleShapeAnchorElement.current; }
	EOF;

// Rule ShapeAnchorElement
ruleShapeAnchorElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='shape'
		{
			newLeafNode(otherlv_0, grammarAccess.getShapeAnchorElementAccess().getShapeKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getShapeAnchorElementAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShapeAnchorElementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getShapeAnchorElementAccess().getElementShapeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConnectorAnchorElement
entryRuleConnectorAnchorElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorAnchorElementRule()); }
	iv_ruleConnectorAnchorElement=ruleConnectorAnchorElement
	{ $current=$iv_ruleConnectorAnchorElement.current; }
	EOF;

// Rule ConnectorAnchorElement
ruleConnectorAnchorElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='connector'
		{
			newLeafNode(otherlv_0, grammarAccess.getConnectorAnchorElementAccess().getConnectorKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getConnectorAnchorElementAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectorAnchorElementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getConnectorAnchorElementAccess().getElementConnectorCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRulePolyline
entryRulePolyline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolylineRule()); }
	iv_rulePolyline=rulePolyline
	{ $current=$iv_rulePolyline.current; }
	EOF;

// Rule Polyline
rulePolyline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPolylineAccess().getPolylineAction_0(),
					$current);
			}
		)
		otherlv_1='polyline'
		{
			newLeafNode(otherlv_1, grammarAccess.getPolylineAccess().getPolylineKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPolylineAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolylineAccess().getSegmentsSegmentParserRuleCall_3_0());
				}
				lv_segments_3_0=ruleSegment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolylineRule());
					}
					add(
						$current,
						"segments",
						lv_segments_3_0,
						"org.xtuml.canvas.language.Canvas.Segment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSegment
entryRuleSegment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSegmentRule()); }
	iv_ruleSegment=ruleSegment
	{ $current=$iv_ruleSegment.current; }
	EOF;

// Rule Segment
ruleSegment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='segment'
		{
			newLeafNode(otherlv_0, grammarAccess.getSegmentAccess().getSegmentKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getSegmentAccess().getColonKeyword_1());
		}
		otherlv_2='start'
		{
			newLeafNode(otherlv_2, grammarAccess.getSegmentAccess().getStartKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getSegmentAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSegmentAccess().getStartPointPointParserRuleCall_4_0());
				}
				lv_startPoint_4_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSegmentRule());
					}
					set(
						$current,
						"startPoint",
						lv_startPoint_4_0,
						"org.xtuml.canvas.language.Canvas.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getSegmentAccess().getEndKeyword_5());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getSegmentAccess().getColonKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSegmentAccess().getEndPointPointParserRuleCall_7_0());
				}
				lv_endPoint_7_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSegmentRule());
					}
					set(
						$current,
						"endPoint",
						lv_endPoint_7_0,
						"org.xtuml.canvas.language.Canvas.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePoint
entryRulePoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointRule()); }
	iv_rulePoint=rulePoint
	{ $current=$iv_rulePoint.current; }
	EOF;

// Rule Point
rulePoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='x'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointAccess().getXKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPointAccess().getColonKeyword_1());
		}
		(
			(
				lv_x_2_0=RULE_INT
				{
					newLeafNode(lv_x_2_0, grammarAccess.getPointAccess().getXINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='y'
		{
			newLeafNode(otherlv_3, grammarAccess.getPointAccess().getYKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getPointAccess().getColonKeyword_4());
		}
		(
			(
				lv_y_5_0=RULE_INT
				{
					newLeafNode(lv_y_5_0, grammarAccess.getPointAccess().getYINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRulePointDefinition
entryRulePointDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointDefinitionRule()); }
	iv_rulePointDefinition=rulePointDefinition
	{ $current=$iv_rulePointDefinition.current; }
	EOF;

// Rule PointDefinition
rulePointDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='point'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointDefinitionAccess().getPointKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPointDefinitionAccess().getColonKeyword_1());
		}
		otherlv_2='x'
		{
			newLeafNode(otherlv_2, grammarAccess.getPointDefinitionAccess().getXKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getPointDefinitionAccess().getColonKeyword_3());
		}
		(
			(
				lv_x_4_0=RULE_INT
				{
					newLeafNode(lv_x_4_0, grammarAccess.getPointDefinitionAccess().getXINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5='y'
		{
			newLeafNode(otherlv_5, grammarAccess.getPointDefinitionAccess().getYKeyword_5());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getPointDefinitionAccess().getColonKeyword_6());
		}
		(
			(
				lv_y_7_0=RULE_INT
				{
					newLeafNode(lv_y_7_0, grammarAccess.getPointDefinitionAccess().getYINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleBounds
entryRuleBounds returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoundsRule()); }
	iv_ruleBounds=ruleBounds
	{ $current=$iv_ruleBounds.current; }
	EOF;

// Rule Bounds
ruleBounds returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='bounds'
		{
			newLeafNode(otherlv_0, grammarAccess.getBoundsAccess().getBoundsKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoundsAccess().getColonKeyword_1());
		}
		otherlv_2='x'
		{
			newLeafNode(otherlv_2, grammarAccess.getBoundsAccess().getXKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getBoundsAccess().getColonKeyword_3());
		}
		(
			(
				lv_x_4_0=RULE_INT
				{
					newLeafNode(lv_x_4_0, grammarAccess.getBoundsAccess().getXINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoundsRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5='y'
		{
			newLeafNode(otherlv_5, grammarAccess.getBoundsAccess().getYKeyword_5());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getBoundsAccess().getColonKeyword_6());
		}
		(
			(
				lv_y_7_0=RULE_INT
				{
					newLeafNode(lv_y_7_0, grammarAccess.getBoundsAccess().getYINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoundsRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_8='width'
		{
			newLeafNode(otherlv_8, grammarAccess.getBoundsAccess().getWidthKeyword_8());
		}
		otherlv_9=':'
		{
			newLeafNode(otherlv_9, grammarAccess.getBoundsAccess().getColonKeyword_9());
		}
		(
			(
				lv_w_10_0=RULE_INT
				{
					newLeafNode(lv_w_10_0, grammarAccess.getBoundsAccess().getWINTTerminalRuleCall_10_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoundsRule());
					}
					setWithLastConsumed(
						$current,
						"w",
						lv_w_10_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_11='height'
		{
			newLeafNode(otherlv_11, grammarAccess.getBoundsAccess().getHeightKeyword_11());
		}
		otherlv_12=':'
		{
			newLeafNode(otherlv_12, grammarAccess.getBoundsAccess().getColonKeyword_12());
		}
		(
			(
				lv_h_13_0=RULE_INT
				{
					newLeafNode(lv_h_13_0, grammarAccess.getBoundsAccess().getHINTTerminalRuleCall_13_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoundsRule());
					}
					setWithLastConsumed(
						$current,
						"h",
						lv_h_13_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleTypeLabel
entryRuleTypeLabel returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeLabelRule()); }
	iv_ruleTypeLabel=ruleTypeLabel
	{ $current=$iv_ruleTypeLabel.current.getText(); }
	EOF;

// Rule TypeLabel
ruleTypeLabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTypeLabelAccess().getOOATypeParserRuleCall());
	}
	this_OOAType_0=ruleOOAType
	{
		$current.merge(this_OOAType_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOOAType
entryRuleOOAType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOOATypeRule()); }
	iv_ruleOOAType=ruleOOAType
	{ $current=$iv_ruleOOAType.current.getText(); }
	EOF;

// Rule OOAType
ruleOOAType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='access_path'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getAccess_pathKeyword_0());
		}
		    |
		kw='association'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getAssociationKeyword_1());
		}
		    |
		kw='associative_link'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getAssociative_linkKeyword_2());
		}
		    |
		kw='class'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getClassKeyword_3());
		}
		    |
		kw='communication_path'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getCommunication_pathKeyword_4());
		}
		    |
		kw='data_type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getData_typeKeyword_5());
		}
		    |
		kw='derived_access_path'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getDerived_access_pathKeyword_6());
		}
		    |
		kw='derived_communication_path'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getDerived_communication_pathKeyword_7());
		}
		    |
		kw='ee'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getEeKeyword_8());
		}
		    |
		kw='enumeration_data_type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getEnumeration_data_typeKeyword_9());
		}
		    |
		kw='imported_class'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getImported_classKeyword_10());
		}
		    |
		kw='none'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getNoneKeyword_11());
		}
		    |
		kw='state'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getStateKeyword_12());
		}
		    |
		kw='state_machine'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getState_machineKeyword_13());
		}
		    |
		kw='subsystem'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getSubsystemKeyword_14());
		}
		    |
		kw='transition'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getTransitionKeyword_15());
		}
		    |
		kw='user_data_type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getUser_data_typeKeyword_16());
		}
		    |
		kw='subtype'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getSubtypeKeyword_17());
		}
		    |
		kw='supertype'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getSupertypeKeyword_18());
		}
		    |
		kw='creation_transition'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getCreation_transitionKeyword_19());
		}
		    |
		kw='sequence'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getSequenceKeyword_20());
		}
		    |
		kw='lifeline'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getLifelineKeyword_21());
		}
		    |
		kw='timing_mark'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getTiming_markKeyword_22());
		}
		    |
		kw='time_span'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getTime_spanKeyword_23());
		}
		    |
		kw='synchronous_message'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getSynchronous_messageKeyword_24());
		}
		    |
		kw='class_instance_participant'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getClass_instance_participantKeyword_25());
		}
		    |
		kw='external_entity_participant'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getExternal_entity_participantKeyword_26());
		}
		    |
		kw='class_participant'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getClass_participantKeyword_27());
		}
		    |
		kw='actor'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getActorKeyword_28());
		}
		    |
		kw='asynchronous_message'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getAsynchronous_messageKeyword_29());
		}
		    |
		kw='return_message'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getReturn_messageKeyword_30());
		}
		    |
		kw='communication'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getCommunicationKeyword_31());
		}
		    |
		kw='communication_link'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getCommunication_linkKeyword_32());
		}
		    |
		kw='communication_return_message'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getCommunication_return_messageKeyword_33());
		}
		    |
		kw='communication_asynchronous_message'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getCommunication_asynchronous_messageKeyword_34());
		}
		    |
		kw='communication_synchronous_message'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getCommunication_synchronous_messageKeyword_35());
		}
		    |
		kw='use_case'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getUse_caseKeyword_36());
		}
		    |
		kw='use_case_diagram'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getUse_case_diagramKeyword_37());
		}
		    |
		kw='use_case_binary_association'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getUse_case_binary_associationKeyword_38());
		}
		    |
		kw='generalization'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getGeneralizationKeyword_39());
		}
		    |
		kw='include'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getIncludeKeyword_40());
		}
		    |
		kw='extend'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getExtendKeyword_41());
		}
		    |
		kw='forkJoin'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getForkJoinKeyword_42());
		}
		    |
		kw='activity'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getActivityKeyword_43());
		}
		    |
		kw='initial_node'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getInitial_nodeKeyword_44());
		}
		    |
		kw='activity_edge'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getActivity_edgeKeyword_45());
		}
		    |
		kw='activity_final_node'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getActivity_final_nodeKeyword_46());
		}
		    |
		kw='flow_final_node'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getFlow_final_nodeKeyword_47());
		}
		    |
		kw='generic_action'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getGeneric_actionKeyword_48());
		}
		    |
		kw='decision_merge_node'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getDecision_merge_nodeKeyword_49());
		}
		    |
		kw='object_node'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getObject_nodeKeyword_50());
		}
		    |
		kw='accept_event_action'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getAccept_event_actionKeyword_51());
		}
		    |
		kw='send_signal_action'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getSend_signal_actionKeyword_52());
		}
		    |
		kw='accept_time_event_action'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getAccept_time_event_actionKeyword_53());
		}
		    |
		kw='partition'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getPartitionKeyword_54());
		}
		    |
		kw='component'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getComponentKeyword_55());
		}
		    |
		kw='provided_interface'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getProvided_interfaceKeyword_56());
		}
		    |
		kw='required_interface'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getRequired_interfaceKeyword_57());
		}
		    |
		kw='interface'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getInterfaceKeyword_58());
		}
		    |
		kw='system_model'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getSystem_modelKeyword_59());
		}
		    |
		kw='structured_data_type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getStructured_data_typeKeyword_60());
		}
		    |
		kw='component_reference'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getComponent_referenceKeyword_61());
		}
		    |
		kw='component_diagram'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getComponent_diagramKeyword_62());
		}
		    |
		kw='delegation'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getDelegationKeyword_63());
		}
		    |
		kw='component_container'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getComponent_containerKeyword_64());
		}
		    |
		kw='imported_provided_interface'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getImported_provided_interfaceKeyword_65());
		}
		    |
		kw='imported_required_interface'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getImported_required_interfaceKeyword_66());
		}
		    |
		kw='component_participant'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getComponent_participantKeyword_67());
		}
		    |
		kw='package'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getPackageKeyword_68());
		}
		    |
		kw='constant_specification'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getConstant_specificationKeyword_69());
		}
		    |
		kw='package_participant'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getPackage_participantKeyword_70());
		}
		    |
		kw='shape'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getShapeKeyword_71());
		}
		    |
		kw='connector'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getConnectorKeyword_72());
		}
		    |
		kw='diagram'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getDiagramKeyword_73());
		}
		    |
		kw='exception'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getExceptionKeyword_74());
		}
		    |
		kw='satisfaction'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getSatisfactionKeyword_75());
		}
		    |
		kw='deployment'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOOATypeAccess().getDeploymentKeyword_76());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
