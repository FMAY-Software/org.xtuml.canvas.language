/*
 * generated by Xtext 2.22.0
 */
grammar InternalCanvas;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtuml.canvas.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtuml.canvas.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtuml.canvas.language.services.CanvasGrammarAccess;

}

@parser::members {

 	private CanvasGrammarAccess grammarAccess;

    public InternalCanvasParser(TokenStream input, CanvasGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CanvasGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSemanticsSemanticModelParserRuleCall_0_0());
				}
				lv_semantics_0_0=ruleSemanticModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"semantics",
						lv_semantics_0_0,
						"org.xtuml.canvas.language.Canvas.SemanticModel");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				otherlv_1='render'
				{
					newLeafNode(otherlv_1, grammarAccess.getModelAccess().getRenderKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getModelAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='render:'
			{
				newLeafNode(otherlv_3, grammarAccess.getModelAccess().getRenderKeyword_1_1());
			}
		)
		(
			(
				lv_represents_4_0=RULE_STRING
				{
					newLeafNode(lv_represents_4_0, grammarAccess.getModelAccess().getRepresentsSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"represents",
						lv_represents_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPropertiesModelPropertiesParserRuleCall_3_0());
				}
				lv_properties_5_0=ruleModelProperties
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"properties",
						lv_properties_5_0,
						"org.xtuml.canvas.language.Canvas.ModelProperties");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementsGraphicalElementParserRuleCall_4_0());
				}
				lv_elements_6_0=ruleGraphicalElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"elements",
						lv_elements_6_0,
						"org.xtuml.canvas.language.Canvas.GraphicalElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSemanticModel
entryRuleSemanticModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSemanticModelRule()); }
	iv_ruleSemanticModel=ruleSemanticModel
	{ $current=$iv_ruleSemanticModel.current; }
	EOF;

// Rule SemanticModel
ruleSemanticModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getSemanticModelAccess().getImportKeyword_0());
		}
		(
			(
				lv_importURI_1_0=RULE_STRING
				{
					newLeafNode(lv_importURI_1_0, grammarAccess.getSemanticModelAccess().getImportURISTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSemanticModelRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleModelProperties
entryRuleModelProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelPropertiesRule()); }
	iv_ruleModelProperties=ruleModelProperties
	{ $current=$iv_ruleModelProperties.current; }
	EOF;

// Rule ModelProperties
ruleModelProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='properties'
				{
					newLeafNode(otherlv_0, grammarAccess.getModelPropertiesAccess().getPropertiesKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getModelPropertiesAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='properties:'
			{
				newLeafNode(otherlv_2, grammarAccess.getModelPropertiesAccess().getPropertiesKeyword_0_1());
			}
		)
		(
			(
				otherlv_3='viewport'
				{
					newLeafNode(otherlv_3, grammarAccess.getModelPropertiesAccess().getViewportKeyword_1_0_0());
				}
				otherlv_4=':'
				{
					newLeafNode(otherlv_4, grammarAccess.getModelPropertiesAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_5='viewport:'
			{
				newLeafNode(otherlv_5, grammarAccess.getModelPropertiesAccess().getViewportKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelPropertiesAccess().getPointPointParserRuleCall_2_0());
				}
				lv_point_6_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelPropertiesRule());
					}
					set(
						$current,
						"point",
						lv_point_6_0,
						"org.xtuml.canvas.language.Canvas.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='zoom'
		{
			newLeafNode(otherlv_7, grammarAccess.getModelPropertiesAccess().getZoomKeyword_3());
		}
		(
			(
				lv_zoom_8_0=RULE_INT
				{
					newLeafNode(lv_zoom_8_0, grammarAccess.getModelPropertiesAccess().getZoomINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelPropertiesRule());
					}
					setWithLastConsumed(
						$current,
						"zoom",
						lv_zoom_8_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleGraphicalElement
entryRuleGraphicalElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphicalElementRule()); }
	iv_ruleGraphicalElement=ruleGraphicalElement
	{ $current=$iv_ruleGraphicalElement.current; }
	EOF;

// Rule GraphicalElement
ruleGraphicalElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGraphicalElementAccess().getShapesParserRuleCall_0());
		}
		this_Shapes_0=ruleShapes
		{
			$current = $this_Shapes_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphicalElementAccess().getFloatingTextsParserRuleCall_1());
		}
		this_FloatingTexts_1=ruleFloatingTexts
		{
			$current = $this_FloatingTexts_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphicalElementAccess().getConnectorsParserRuleCall_2());
		}
		this_Connectors_2=ruleConnectors
		{
			$current = $this_Connectors_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleShapes
entryRuleShapes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapesRule()); }
	iv_ruleShapes=ruleShapes
	{ $current=$iv_ruleShapes.current; }
	EOF;

// Rule Shapes
ruleShapes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapesAccess().getShapesAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='shapes'
				{
					newLeafNode(otherlv_1, grammarAccess.getShapesAccess().getShapesKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getShapesAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='shapes:'
			{
				newLeafNode(otherlv_3, grammarAccess.getShapesAccess().getShapesKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapesAccess().getShapesShapeParserRuleCall_2_0());
				}
				lv_shapes_4_0=ruleShape
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapesRule());
					}
					add(
						$current,
						"shapes",
						lv_shapes_4_0,
						"org.xtuml.canvas.language.Canvas.Shape");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleShape
entryRuleShape returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeRule()); }
	iv_ruleShape=ruleShape
	{ $current=$iv_ruleShape.current; }
	EOF;

// Rule Shape
ruleShape returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapeAccess().getShapeAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='shape'
				{
					newLeafNode(otherlv_1, grammarAccess.getShapeAccess().getShapeKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getShapeAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='shape:'
			{
				newLeafNode(otherlv_3, grammarAccess.getShapeAccess().getShapeKeyword_1_1());
			}
		)
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getShapeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShapeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeAccess().getPropsShapePropsParserRuleCall_3_0());
				}
				lv_props_5_0=ruleShapeProps
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeRule());
					}
					set(
						$current,
						"props",
						lv_props_5_0,
						"org.xtuml.canvas.language.Canvas.ShapeProps");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeAccess().getRectRectangleParserRuleCall_4_0());
				}
				lv_rect_6_0=ruleRectangle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeRule());
					}
					set(
						$current,
						"rect",
						lv_rect_6_0,
						"org.xtuml.canvas.language.Canvas.Rectangle");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_7='render'
				{
					newLeafNode(otherlv_7, grammarAccess.getShapeAccess().getRenderKeyword_5_0_0());
				}
				otherlv_8=':'
				{
					newLeafNode(otherlv_8, grammarAccess.getShapeAccess().getColonKeyword_5_0_1());
				}
			)
			    |
			otherlv_9='render:'
			{
				newLeafNode(otherlv_9, grammarAccess.getShapeAccess().getRenderKeyword_5_1());
			}
		)
		(
			(
				lv_represents_10_0=RULE_STRING
				{
					newLeafNode(lv_represents_10_0, grammarAccess.getShapeAccess().getRepresentsSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShapeRule());
					}
					setWithLastConsumed(
						$current,
						"represents",
						lv_represents_10_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleFloatingTexts
entryRuleFloatingTexts returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatingTextsRule()); }
	iv_ruleFloatingTexts=ruleFloatingTexts
	{ $current=$iv_ruleFloatingTexts.current; }
	EOF;

// Rule FloatingTexts
ruleFloatingTexts returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFloatingTextsAccess().getFloatingTextsAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='texts'
				{
					newLeafNode(otherlv_1, grammarAccess.getFloatingTextsAccess().getTextsKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getFloatingTextsAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='texts:'
			{
				newLeafNode(otherlv_3, grammarAccess.getFloatingTextsAccess().getTextsKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatingTextsAccess().getTextsFloatingTextParserRuleCall_2_0());
				}
				lv_texts_4_0=ruleFloatingText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatingTextsRule());
					}
					add(
						$current,
						"texts",
						lv_texts_4_0,
						"org.xtuml.canvas.language.Canvas.FloatingText");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFloatingText
entryRuleFloatingText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatingTextRule()); }
	iv_ruleFloatingText=ruleFloatingText
	{ $current=$iv_ruleFloatingText.current; }
	EOF;

// Rule FloatingText
ruleFloatingText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFloatingTextAccess().getFloatingTextAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='text'
				{
					newLeafNode(otherlv_1, grammarAccess.getFloatingTextAccess().getTextKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getFloatingTextAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='text:'
			{
				newLeafNode(otherlv_3, grammarAccess.getFloatingTextAccess().getTextKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatingTextAccess().getRectRectangleParserRuleCall_2_0());
				}
				lv_rect_4_0=ruleRectangle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatingTextRule());
					}
					set(
						$current,
						"rect",
						lv_rect_4_0,
						"org.xtuml.canvas.language.Canvas.Rectangle");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFloatingTextAccess().getAssociatedShapeParserRuleCall_3_0_0());
					}
					lv_associated_5_1=ruleShape
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFloatingTextRule());
						}
						set(
							$current,
							"associated",
							lv_associated_5_1,
							"org.xtuml.canvas.language.Canvas.Shape");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getFloatingTextAccess().getAssociatedConnectorParserRuleCall_3_0_1());
					}
					lv_associated_5_2=ruleConnector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFloatingTextRule());
						}
						set(
							$current,
							"associated",
							lv_associated_5_2,
							"org.xtuml.canvas.language.Canvas.Connector");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleShapeProps
entryRuleShapeProps returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapePropsRule()); }
	iv_ruleShapeProps=ruleShapeProps
	{ $current=$iv_ruleShapeProps.current; }
	EOF;

// Rule ShapeProps
ruleShapeProps returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapePropsAccess().getShapePropsAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='properties'
				{
					newLeafNode(otherlv_1, grammarAccess.getShapePropsAccess().getPropertiesKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getShapePropsAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='properties:'
			{
				newLeafNode(otherlv_3, grammarAccess.getShapePropsAccess().getPropertiesKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapePropsAccess().getContainerContainerParserRuleCall_2_0());
				}
				lv_container_4_0=ruleContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapePropsRule());
					}
					set(
						$current,
						"container",
						lv_container_4_0,
						"org.xtuml.canvas.language.Canvas.Container");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getShapePropsAccess().getColorColorParserRuleCall_3_0());
				}
				lv_color_5_0=ruleColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapePropsRule());
					}
					set(
						$current,
						"color",
						lv_color_5_0,
						"org.xtuml.canvas.language.Canvas.Color");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleContainer
entryRuleContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerRule()); }
	iv_ruleContainer=ruleContainer
	{ $current=$iv_ruleContainer.current; }
	EOF;

// Rule Container
ruleContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getContainerAccess().getShapeContainerAction_0(),
					$current);
			}
		)
		otherlv_1='container'
		{
			newLeafNode(otherlv_1, grammarAccess.getContainerAccess().getContainerKeyword_1());
		}
		(
			otherlv_2='true'
			{
				newLeafNode(otherlv_2, grammarAccess.getContainerAccess().getTrueKeyword_2_0());
			}
			    |
			otherlv_3='false'
			{
				newLeafNode(otherlv_3, grammarAccess.getContainerAccess().getFalseKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleColor
entryRuleColor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColorRule()); }
	iv_ruleColor=ruleColor
	{ $current=$iv_ruleColor.current; }
	EOF;

// Rule Color
ruleColor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='color'
		{
			newLeafNode(otherlv_0, grammarAccess.getColorAccess().getColorKeyword_0());
		}
		(
			(
				lv_r_1_0=RULE_INT
				{
					newLeafNode(lv_r_1_0, grammarAccess.getColorAccess().getRINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColorRule());
					}
					setWithLastConsumed(
						$current,
						"r",
						lv_r_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_g_2_0=RULE_INT
				{
					newLeafNode(lv_g_2_0, grammarAccess.getColorAccess().getGINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColorRule());
					}
					setWithLastConsumed(
						$current,
						"g",
						lv_g_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_b_3_0=RULE_INT
				{
					newLeafNode(lv_b_3_0, grammarAccess.getColorAccess().getBINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColorRule());
					}
					setWithLastConsumed(
						$current,
						"b",
						lv_b_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleConnectors
entryRuleConnectors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorsRule()); }
	iv_ruleConnectors=ruleConnectors
	{ $current=$iv_ruleConnectors.current; }
	EOF;

// Rule Connectors
ruleConnectors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConnectorsAccess().getConnectorsAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='connectors'
				{
					newLeafNode(otherlv_1, grammarAccess.getConnectorsAccess().getConnectorsKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getConnectorsAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='connectors:'
			{
				newLeafNode(otherlv_3, grammarAccess.getConnectorsAccess().getConnectorsKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorsAccess().getConnectorsConnectorParserRuleCall_2_0());
				}
				lv_connectors_4_0=ruleConnector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorsRule());
					}
					add(
						$current,
						"connectors",
						lv_connectors_4_0,
						"org.xtuml.canvas.language.Canvas.Connector");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConnector
entryRuleConnector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorRule()); }
	iv_ruleConnector=ruleConnector
	{ $current=$iv_ruleConnector.current; }
	EOF;

// Rule Connector
ruleConnector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='connector'
				{
					newLeafNode(otherlv_0, grammarAccess.getConnectorAccess().getConnectorKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getConnectorAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='connector:'
			{
				newLeafNode(otherlv_2, grammarAccess.getConnectorAccess().getConnectorKeyword_0_1());
			}
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getConnectorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getPropsConnectorPropsParserRuleCall_2_0());
				}
				lv_props_4_0=ruleConnectorProps
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorRule());
					}
					set(
						$current,
						"props",
						lv_props_4_0,
						"org.xtuml.canvas.language.Canvas.ConnectorProps");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getPolylinePolylineParserRuleCall_3_0());
				}
				lv_polyline_5_0=rulePolyline
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorRule());
					}
					set(
						$current,
						"polyline",
						lv_polyline_5_0,
						"org.xtuml.canvas.language.Canvas.Polyline");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getAnchorsAnchorsParserRuleCall_4_0());
				}
				lv_anchors_6_0=ruleAnchors
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorRule());
					}
					set(
						$current,
						"anchors",
						lv_anchors_6_0,
						"org.xtuml.canvas.language.Canvas.Anchors");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				otherlv_7='render'
				{
					newLeafNode(otherlv_7, grammarAccess.getConnectorAccess().getRenderKeyword_5_0_0());
				}
				otherlv_8=':'
				{
					newLeafNode(otherlv_8, grammarAccess.getConnectorAccess().getColonKeyword_5_0_1());
				}
			)
			    |
			otherlv_9='render:'
			{
				newLeafNode(otherlv_9, grammarAccess.getConnectorAccess().getRenderKeyword_5_1());
			}
		)
		(
			(
				lv_represents_10_0=RULE_STRING
				{
					newLeafNode(lv_represents_10_0, grammarAccess.getConnectorAccess().getRepresentsSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectorRule());
					}
					setWithLastConsumed(
						$current,
						"represents",
						lv_represents_10_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAnchors
entryRuleAnchors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnchorsRule()); }
	iv_ruleAnchors=ruleAnchors
	{ $current=$iv_ruleAnchors.current; }
	EOF;

// Rule Anchors
ruleAnchors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='anchors'
				{
					newLeafNode(otherlv_0, grammarAccess.getAnchorsAccess().getAnchorsKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getAnchorsAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='anchors:'
			{
				newLeafNode(otherlv_2, grammarAccess.getAnchorsAccess().getAnchorsKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnchorsAccess().getStartAnchorStartAnchorParserRuleCall_1_0());
				}
				lv_startAnchor_3_0=ruleStartAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnchorsRule());
					}
					set(
						$current,
						"startAnchor",
						lv_startAnchor_3_0,
						"org.xtuml.canvas.language.Canvas.StartAnchor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnchorsAccess().getEndAnchorEndAnchorParserRuleCall_2_0());
				}
				lv_endAnchor_4_0=ruleEndAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnchorsRule());
					}
					set(
						$current,
						"endAnchor",
						lv_endAnchor_4_0,
						"org.xtuml.canvas.language.Canvas.EndAnchor");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStartAnchor
entryRuleStartAnchor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartAnchorRule()); }
	iv_ruleStartAnchor=ruleStartAnchor
	{ $current=$iv_ruleStartAnchor.current; }
	EOF;

// Rule StartAnchor
ruleStartAnchor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='start'
				{
					newLeafNode(otherlv_0, grammarAccess.getStartAnchorAccess().getStartKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getStartAnchorAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='start:'
			{
				newLeafNode(otherlv_2, grammarAccess.getStartAnchorAccess().getStartKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStartAnchorAccess().getPointPointParserRuleCall_1_0());
				}
				lv_point_3_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartAnchorRule());
					}
					set(
						$current,
						"point",
						lv_point_3_0,
						"org.xtuml.canvas.language.Canvas.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStartAnchorAccess().getAnchorAnchorParserRuleCall_2_0());
				}
				lv_anchor_4_0=ruleAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartAnchorRule());
					}
					set(
						$current,
						"anchor",
						lv_anchor_4_0,
						"org.xtuml.canvas.language.Canvas.Anchor");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleEndAnchor
entryRuleEndAnchor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndAnchorRule()); }
	iv_ruleEndAnchor=ruleEndAnchor
	{ $current=$iv_ruleEndAnchor.current; }
	EOF;

// Rule EndAnchor
ruleEndAnchor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='end'
				{
					newLeafNode(otherlv_0, grammarAccess.getEndAnchorAccess().getEndKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getEndAnchorAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='end'
			{
				newLeafNode(otherlv_2, grammarAccess.getEndAnchorAccess().getEndKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEndAnchorAccess().getPointPointParserRuleCall_1_0());
				}
				lv_point_3_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndAnchorRule());
					}
					set(
						$current,
						"point",
						lv_point_3_0,
						"org.xtuml.canvas.language.Canvas.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEndAnchorAccess().getAnchorAnchorParserRuleCall_2_0());
				}
				lv_anchor_4_0=ruleAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndAnchorRule());
					}
					set(
						$current,
						"anchor",
						lv_anchor_4_0,
						"org.xtuml.canvas.language.Canvas.Anchor");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAnchor
entryRuleAnchor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnchorRule()); }
	iv_ruleAnchor=ruleAnchor
	{ $current=$iv_ruleAnchor.current; }
	EOF;

// Rule Anchor
ruleAnchor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAnchorAccess().getShapeAnchorElementParserRuleCall_0());
		}
		this_ShapeAnchorElement_0=ruleShapeAnchorElement
		{
			$current = $this_ShapeAnchorElement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAnchorAccess().getConnectorAnchorElementParserRuleCall_1());
		}
		this_ConnectorAnchorElement_1=ruleConnectorAnchorElement
		{
			$current = $this_ConnectorAnchorElement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleShapeAnchorElement
entryRuleShapeAnchorElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeAnchorElementRule()); }
	iv_ruleShapeAnchorElement=ruleShapeAnchorElement
	{ $current=$iv_ruleShapeAnchorElement.current; }
	EOF;

// Rule ShapeAnchorElement
ruleShapeAnchorElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='shapeAnchor'
				{
					newLeafNode(otherlv_0, grammarAccess.getShapeAnchorElementAccess().getShapeAnchorKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getShapeAnchorElementAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='shapeAnchor:'
			{
				newLeafNode(otherlv_2, grammarAccess.getShapeAnchorElementAccess().getShapeAnchorKeyword_0_1());
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShapeAnchorElementRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getShapeAnchorElementAccess().getElementShapeCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConnectorAnchorElement
entryRuleConnectorAnchorElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorAnchorElementRule()); }
	iv_ruleConnectorAnchorElement=ruleConnectorAnchorElement
	{ $current=$iv_ruleConnectorAnchorElement.current; }
	EOF;

// Rule ConnectorAnchorElement
ruleConnectorAnchorElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='segmentAnchor'
				{
					newLeafNode(otherlv_0, grammarAccess.getConnectorAnchorElementAccess().getSegmentAnchorKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getConnectorAnchorElementAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='segmentAnchor:'
			{
				newLeafNode(otherlv_2, grammarAccess.getConnectorAnchorElementAccess().getSegmentAnchorKeyword_0_1());
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectorAnchorElementRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getConnectorAnchorElementAccess().getElementConnectorCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConnectorProps
entryRuleConnectorProps returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorPropsRule()); }
	iv_ruleConnectorProps=ruleConnectorProps
	{ $current=$iv_ruleConnectorProps.current; }
	EOF;

// Rule ConnectorProps
ruleConnectorProps returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConnectorPropsAccess().getConnectorPropsAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='properties'
				{
					newLeafNode(otherlv_1, grammarAccess.getConnectorPropsAccess().getPropertiesKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getConnectorPropsAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='properties:'
			{
				newLeafNode(otherlv_3, grammarAccess.getConnectorPropsAccess().getPropertiesKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorPropsAccess().getColorColorParserRuleCall_2_0());
				}
				lv_color_4_0=ruleColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorPropsRule());
					}
					set(
						$current,
						"color",
						lv_color_4_0,
						"org.xtuml.canvas.language.Canvas.Color");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePolyline
entryRulePolyline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolylineRule()); }
	iv_rulePolyline=rulePolyline
	{ $current=$iv_rulePolyline.current; }
	EOF;

// Rule Polyline
rulePolyline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPolylineAccess().getPolylineAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='polyline'
				{
					newLeafNode(otherlv_1, grammarAccess.getPolylineAccess().getPolylineKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getPolylineAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='polyline:'
			{
				newLeafNode(otherlv_3, grammarAccess.getPolylineAccess().getPolylineKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPolylineAccess().getSegmentsSegmentParserRuleCall_2_0());
				}
				lv_segments_4_0=ruleSegment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolylineRule());
					}
					add(
						$current,
						"segments",
						lv_segments_4_0,
						"org.xtuml.canvas.language.Canvas.Segment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSegment
entryRuleSegment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSegmentRule()); }
	iv_ruleSegment=ruleSegment
	{ $current=$iv_ruleSegment.current; }
	EOF;

// Rule Segment
ruleSegment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='segment'
				{
					newLeafNode(otherlv_0, grammarAccess.getSegmentAccess().getSegmentKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getSegmentAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='segment:'
			{
				newLeafNode(otherlv_2, grammarAccess.getSegmentAccess().getSegmentKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSegmentAccess().getStartPointPointParserRuleCall_1_0());
				}
				lv_startPoint_3_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSegmentRule());
					}
					set(
						$current,
						"startPoint",
						lv_startPoint_3_0,
						"org.xtuml.canvas.language.Canvas.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getSegmentAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSegmentAccess().getEndPointPointParserRuleCall_3_0());
				}
				lv_endPoint_5_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSegmentRule());
					}
					set(
						$current,
						"endPoint",
						lv_endPoint_5_0,
						"org.xtuml.canvas.language.Canvas.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePoint
entryRulePoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointRule()); }
	iv_rulePoint=rulePoint
	{ $current=$iv_rulePoint.current; }
	EOF;

// Rule Point
rulePoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='x'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointAccess().getXKeyword_0());
		}
		(
			(
				lv_x_1_0=RULE_INT
				{
					newLeafNode(lv_x_1_0, grammarAccess.getPointAccess().getXINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='y'
		{
			newLeafNode(otherlv_2, grammarAccess.getPointAccess().getYKeyword_2());
		}
		(
			(
				lv_y_3_0=RULE_INT
				{
					newLeafNode(lv_y_3_0, grammarAccess.getPointAccess().getYINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleRectangle
entryRuleRectangle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRectangleRule()); }
	iv_ruleRectangle=ruleRectangle
	{ $current=$iv_ruleRectangle.current; }
	EOF;

// Rule Rectangle
ruleRectangle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='rectangle'
				{
					newLeafNode(otherlv_0, grammarAccess.getRectangleAccess().getRectangleKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getRectangleAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='rectangle:'
			{
				newLeafNode(otherlv_2, grammarAccess.getRectangleAccess().getRectangleKeyword_0_1());
			}
		)
		otherlv_3='x'
		{
			newLeafNode(otherlv_3, grammarAccess.getRectangleAccess().getXKeyword_1());
		}
		(
			(
				lv_x_4_0=RULE_INT
				{
					newLeafNode(lv_x_4_0, grammarAccess.getRectangleAccess().getXINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRectangleRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5='y'
		{
			newLeafNode(otherlv_5, grammarAccess.getRectangleAccess().getYKeyword_3());
		}
		(
			(
				lv_y_6_0=RULE_INT
				{
					newLeafNode(lv_y_6_0, grammarAccess.getRectangleAccess().getYINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRectangleRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_6_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_7='width'
		{
			newLeafNode(otherlv_7, grammarAccess.getRectangleAccess().getWidthKeyword_5());
		}
		(
			(
				lv_w_8_0=RULE_INT
				{
					newLeafNode(lv_w_8_0, grammarAccess.getRectangleAccess().getWINTTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRectangleRule());
					}
					setWithLastConsumed(
						$current,
						"w",
						lv_w_8_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_9='height'
		{
			newLeafNode(otherlv_9, grammarAccess.getRectangleAccess().getHeightKeyword_7());
		}
		(
			(
				lv_h_10_0=RULE_INT
				{
					newLeafNode(lv_h_10_0, grammarAccess.getRectangleAccess().getHINTTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRectangleRule());
					}
					setWithLastConsumed(
						$current,
						"h",
						lv_h_10_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
