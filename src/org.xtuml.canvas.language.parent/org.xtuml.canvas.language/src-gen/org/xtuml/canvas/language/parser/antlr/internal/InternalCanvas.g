/*
 * generated by Xtext 2.22.0
 */
grammar InternalCanvas;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtuml.canvas.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtuml.canvas.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtuml.canvas.language.services.CanvasGrammarAccess;

}

@parser::members {

 	private CanvasGrammarAccess grammarAccess;

    public InternalCanvasParser(TokenStream input, CanvasGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CanvasGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getRenderModelRenderParserRuleCall_0_0());
				}
				lv_render_0_0=ruleModelRender
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"render",
						lv_render_0_0,
						"org.xtuml.canvas.language.Canvas.ModelRender");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPropertiesModelPropertiesParserRuleCall_1_0());
				}
				lv_properties_1_0=ruleModelProperties
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"properties",
						lv_properties_1_0,
						"org.xtuml.canvas.language.Canvas.ModelProperties");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementsGraphicalElementParserRuleCall_2_0());
				}
				lv_elements_2_0=ruleGraphicalElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"elements",
						lv_elements_2_0,
						"org.xtuml.canvas.language.Canvas.GraphicalElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleModelRender
entryRuleModelRender returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRenderRule()); }
	iv_ruleModelRender=ruleModelRender
	{ $current=$iv_ruleModelRender.current; }
	EOF;

// Rule ModelRender
ruleModelRender returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='render'
				{
					newLeafNode(otherlv_0, grammarAccess.getModelRenderAccess().getRenderKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getModelRenderAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='render:'
			{
				newLeafNode(otherlv_2, grammarAccess.getModelRenderAccess().getRenderKeyword_0_1());
			}
		)
		(
			(
				lv_importURI_3_0=RULE_STRING
				{
					newLeafNode(lv_importURI_3_0, grammarAccess.getModelRenderAccess().getImportURISTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRenderRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleModelProperties
entryRuleModelProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelPropertiesRule()); }
	iv_ruleModelProperties=ruleModelProperties
	{ $current=$iv_ruleModelProperties.current; }
	EOF;

// Rule ModelProperties
ruleModelProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='properties'
				{
					newLeafNode(otherlv_0, grammarAccess.getModelPropertiesAccess().getPropertiesKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getModelPropertiesAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='properties:'
			{
				newLeafNode(otherlv_2, grammarAccess.getModelPropertiesAccess().getPropertiesKeyword_0_1());
			}
		)
		(
			(
				otherlv_3='viewport'
				{
					newLeafNode(otherlv_3, grammarAccess.getModelPropertiesAccess().getViewportKeyword_1_0_0());
				}
				otherlv_4=':'
				{
					newLeafNode(otherlv_4, grammarAccess.getModelPropertiesAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_5='viewport:'
			{
				newLeafNode(otherlv_5, grammarAccess.getModelPropertiesAccess().getViewportKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelPropertiesAccess().getPointPointParserRuleCall_2_0());
				}
				lv_point_6_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelPropertiesRule());
					}
					set(
						$current,
						"point",
						lv_point_6_0,
						"org.xtuml.canvas.language.Canvas.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_7='zoom'
				{
					newLeafNode(otherlv_7, grammarAccess.getModelPropertiesAccess().getZoomKeyword_3_0_0());
				}
				otherlv_8=':'
				{
					newLeafNode(otherlv_8, grammarAccess.getModelPropertiesAccess().getColonKeyword_3_0_1());
				}
			)
			    |
			otherlv_9='zoom:'
			{
				newLeafNode(otherlv_9, grammarAccess.getModelPropertiesAccess().getZoomKeyword_3_1());
			}
		)
		(
			(
				lv_zoom_10_0=RULE_INT
				{
					newLeafNode(lv_zoom_10_0, grammarAccess.getModelPropertiesAccess().getZoomINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelPropertiesRule());
					}
					setWithLastConsumed(
						$current,
						"zoom",
						lv_zoom_10_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleGraphicalElement
entryRuleGraphicalElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphicalElementRule()); }
	iv_ruleGraphicalElement=ruleGraphicalElement
	{ $current=$iv_ruleGraphicalElement.current; }
	EOF;

// Rule GraphicalElement
ruleGraphicalElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGraphicalElementAccess().getShapesParserRuleCall_0());
		}
		this_Shapes_0=ruleShapes
		{
			$current = $this_Shapes_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphicalElementAccess().getConnectorsParserRuleCall_1());
		}
		this_Connectors_1=ruleConnectors
		{
			$current = $this_Connectors_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleShapes
entryRuleShapes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapesRule()); }
	iv_ruleShapes=ruleShapes
	{ $current=$iv_ruleShapes.current; }
	EOF;

// Rule Shapes
ruleShapes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapesAccess().getShapesAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='shapes'
				{
					newLeafNode(otherlv_1, grammarAccess.getShapesAccess().getShapesKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getShapesAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='shapes:'
			{
				newLeafNode(otherlv_3, grammarAccess.getShapesAccess().getShapesKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapesAccess().getShapesShapeParserRuleCall_2_0());
				}
				lv_shapes_4_0=ruleShape
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapesRule());
					}
					add(
						$current,
						"shapes",
						lv_shapes_4_0,
						"org.xtuml.canvas.language.Canvas.Shape");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleShape
entryRuleShape returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeRule()); }
	iv_ruleShape=ruleShape
	{ $current=$iv_ruleShape.current; }
	EOF;

// Rule Shape
ruleShape returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getShapeAccess().getShapeAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='shape'
				{
					newLeafNode(otherlv_1, grammarAccess.getShapeAccess().getShapeKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getShapeAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='shape:'
			{
				newLeafNode(otherlv_3, grammarAccess.getShapeAccess().getShapeKeyword_1_1());
			}
		)
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getShapeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShapeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeAccess().getContainerContainerParserRuleCall_3_0());
				}
				lv_container_5_0=ruleContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeRule());
					}
					set(
						$current,
						"container",
						lv_container_5_0,
						"org.xtuml.canvas.language.Canvas.Container");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				otherlv_6='render'
				{
					newLeafNode(otherlv_6, grammarAccess.getShapeAccess().getRenderKeyword_4_0_0());
				}
				otherlv_7=':'
				{
					newLeafNode(otherlv_7, grammarAccess.getShapeAccess().getColonKeyword_4_0_1());
				}
			)
			    |
			otherlv_8='render:'
			{
				newLeafNode(otherlv_8, grammarAccess.getShapeAccess().getRenderKeyword_4_1());
			}
		)
		(
			(
				lv_represents_9_0=RULE_STRING
				{
					newLeafNode(lv_represents_9_0, grammarAccess.getShapeAccess().getRepresentsSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShapeRule());
					}
					setWithLastConsumed(
						$current,
						"represents",
						lv_represents_9_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeAccess().getRectRectangleParserRuleCall_6_0());
				}
				lv_rect_10_0=ruleRectangle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeRule());
					}
					set(
						$current,
						"rect",
						lv_rect_10_0,
						"org.xtuml.canvas.language.Canvas.Rectangle");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShapeAccess().getTextFloatingTextParserRuleCall_7_0());
				}
				lv_text_11_0=ruleFloatingText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShapeRule());
					}
					set(
						$current,
						"text",
						lv_text_11_0,
						"org.xtuml.canvas.language.Canvas.FloatingText");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleContainer
entryRuleContainer returns [String current=null]:
	{ newCompositeNode(grammarAccess.getContainerRule()); }
	iv_ruleContainer=ruleContainer
	{ $current=$iv_ruleContainer.current.getText(); }
	EOF;

// Rule Container
ruleContainer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='container'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getContainerAccess().getContainerKeyword());
	}
;

// Entry rule entryRuleFloatingTexts
entryRuleFloatingTexts returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatingTextsRule()); }
	iv_ruleFloatingTexts=ruleFloatingTexts
	{ $current=$iv_ruleFloatingTexts.current; }
	EOF;

// Rule FloatingTexts
ruleFloatingTexts returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFloatingTextsAccess().getFloatingTextsAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='texts'
				{
					newLeafNode(otherlv_1, grammarAccess.getFloatingTextsAccess().getTextsKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getFloatingTextsAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='texts:'
			{
				newLeafNode(otherlv_3, grammarAccess.getFloatingTextsAccess().getTextsKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatingTextsAccess().getTextsFloatingTextParserRuleCall_2_0());
				}
				lv_texts_4_0=ruleFloatingText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatingTextsRule());
					}
					add(
						$current,
						"texts",
						lv_texts_4_0,
						"org.xtuml.canvas.language.Canvas.FloatingText");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFloatingText
entryRuleFloatingText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatingTextRule()); }
	iv_ruleFloatingText=ruleFloatingText
	{ $current=$iv_ruleFloatingText.current; }
	EOF;

// Rule FloatingText
ruleFloatingText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFloatingTextAccess().getFloatingTextAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='text'
				{
					newLeafNode(otherlv_1, grammarAccess.getFloatingTextAccess().getTextKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getFloatingTextAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='text:'
			{
				newLeafNode(otherlv_3, grammarAccess.getFloatingTextAccess().getTextKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatingTextAccess().getRectRectangleParserRuleCall_2_0());
				}
				lv_rect_4_0=ruleRectangle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatingTextRule());
					}
					set(
						$current,
						"rect",
						lv_rect_4_0,
						"org.xtuml.canvas.language.Canvas.Rectangle");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatingTextAccess().getEndEnumEndParserRuleCall_3_0());
				}
				lv_end_5_0=ruleEnumEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatingTextRule());
					}
					set(
						$current,
						"end",
						lv_end_5_0,
						"org.xtuml.canvas.language.Canvas.EnumEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEnumEnd
entryRuleEnumEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumEndRule()); }
	iv_ruleEnumEnd=ruleEnumEnd
	{ $current=$iv_ruleEnumEnd.current; }
	EOF;

// Rule EnumEnd
ruleEnumEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='where'
				{
					newLeafNode(otherlv_0, grammarAccess.getEnumEndAccess().getWhereKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getEnumEndAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='where:'
			{
				newLeafNode(otherlv_2, grammarAccess.getEnumEndAccess().getWhereKeyword_0_1());
			}
		)
		(
			(
				(
					lv_where_3_1='start'
					{
						newLeafNode(lv_where_3_1, grammarAccess.getEnumEndAccess().getWhereStartKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_3_1, null);
					}
					    |
					lv_where_3_2='end'
					{
						newLeafNode(lv_where_3_2, grammarAccess.getEnumEndAccess().getWhereEndKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_3_2, null);
					}
					    |
					lv_where_3_3='middle'
					{
						newLeafNode(lv_where_3_3, grammarAccess.getEnumEndAccess().getWhereMiddleKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_3_3, null);
					}
					    |
					lv_where_3_4='end_fixed'
					{
						newLeafNode(lv_where_3_4, grammarAccess.getEnumEndAccess().getWhereEnd_fixedKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_3_4, null);
					}
					    |
					lv_where_3_5='start_fixed'
					{
						newLeafNode(lv_where_3_5, grammarAccess.getEnumEndAccess().getWhereStart_fixedKeyword_1_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_3_5, null);
					}
					    |
					lv_where_3_6='none'
					{
						newLeafNode(lv_where_3_6, grammarAccess.getEnumEndAccess().getWhereNoneKeyword_1_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_3_6, null);
					}
					    |
					lv_where_3_7='floating'
					{
						newLeafNode(lv_where_3_7, grammarAccess.getEnumEndAccess().getWhereFloatingKeyword_1_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_3_7, null);
					}
					    |
					lv_where_3_8='additional'
					{
						newLeafNode(lv_where_3_8, grammarAccess.getEnumEndAccess().getWhereAdditionalKeyword_1_0_7());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumEndRule());
						}
						setWithLastConsumed($current, "where", lv_where_3_8, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleConnectors
entryRuleConnectors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorsRule()); }
	iv_ruleConnectors=ruleConnectors
	{ $current=$iv_ruleConnectors.current; }
	EOF;

// Rule Connectors
ruleConnectors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConnectorsAccess().getConnectorsAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='connectors'
				{
					newLeafNode(otherlv_1, grammarAccess.getConnectorsAccess().getConnectorsKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getConnectorsAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='connectors:'
			{
				newLeafNode(otherlv_3, grammarAccess.getConnectorsAccess().getConnectorsKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorsAccess().getConnectorsConnectorParserRuleCall_2_0());
				}
				lv_connectors_4_0=ruleConnector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorsRule());
					}
					add(
						$current,
						"connectors",
						lv_connectors_4_0,
						"org.xtuml.canvas.language.Canvas.Connector");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConnector
entryRuleConnector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorRule()); }
	iv_ruleConnector=ruleConnector
	{ $current=$iv_ruleConnector.current; }
	EOF;

// Rule Connector
ruleConnector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='connector'
				{
					newLeafNode(otherlv_0, grammarAccess.getConnectorAccess().getConnectorKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getConnectorAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='connector:'
			{
				newLeafNode(otherlv_2, grammarAccess.getConnectorAccess().getConnectorKeyword_0_1());
			}
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getConnectorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				otherlv_4='render'
				{
					newLeafNode(otherlv_4, grammarAccess.getConnectorAccess().getRenderKeyword_2_0_0());
				}
				otherlv_5=':'
				{
					newLeafNode(otherlv_5, grammarAccess.getConnectorAccess().getColonKeyword_2_0_1());
				}
			)
			    |
			otherlv_6='render:'
			{
				newLeafNode(otherlv_6, grammarAccess.getConnectorAccess().getRenderKeyword_2_1());
			}
		)
		(
			(
				lv_represents_7_0=RULE_STRING
				{
					newLeafNode(lv_represents_7_0, grammarAccess.getConnectorAccess().getRepresentsSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectorRule());
					}
					setWithLastConsumed(
						$current,
						"represents",
						lv_represents_7_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getPolylinePolylineParserRuleCall_4_0());
				}
				lv_polyline_8_0=rulePolyline
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorRule());
					}
					set(
						$current,
						"polyline",
						lv_polyline_8_0,
						"org.xtuml.canvas.language.Canvas.Polyline");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getAnchorsAnchorsParserRuleCall_5_0());
				}
				lv_anchors_9_0=ruleAnchors
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorRule());
					}
					set(
						$current,
						"anchors",
						lv_anchors_9_0,
						"org.xtuml.canvas.language.Canvas.Anchors");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getTextsFloatingTextsParserRuleCall_6_0());
				}
				lv_texts_10_0=ruleFloatingTexts
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorRule());
					}
					set(
						$current,
						"texts",
						lv_texts_10_0,
						"org.xtuml.canvas.language.Canvas.FloatingTexts");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAnchors
entryRuleAnchors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnchorsRule()); }
	iv_ruleAnchors=ruleAnchors
	{ $current=$iv_ruleAnchors.current; }
	EOF;

// Rule Anchors
ruleAnchors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='anchors'
				{
					newLeafNode(otherlv_0, grammarAccess.getAnchorsAccess().getAnchorsKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getAnchorsAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='anchors:'
			{
				newLeafNode(otherlv_2, grammarAccess.getAnchorsAccess().getAnchorsKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnchorsAccess().getStartAnchorStartAnchorParserRuleCall_1_0());
				}
				lv_startAnchor_3_0=ruleStartAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnchorsRule());
					}
					set(
						$current,
						"startAnchor",
						lv_startAnchor_3_0,
						"org.xtuml.canvas.language.Canvas.StartAnchor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnchorsAccess().getEndAnchorEndAnchorParserRuleCall_2_0());
				}
				lv_endAnchor_4_0=ruleEndAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnchorsRule());
					}
					set(
						$current,
						"endAnchor",
						lv_endAnchor_4_0,
						"org.xtuml.canvas.language.Canvas.EndAnchor");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStartAnchor
entryRuleStartAnchor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartAnchorRule()); }
	iv_ruleStartAnchor=ruleStartAnchor
	{ $current=$iv_ruleStartAnchor.current; }
	EOF;

// Rule StartAnchor
ruleStartAnchor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='start'
				{
					newLeafNode(otherlv_0, grammarAccess.getStartAnchorAccess().getStartKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getStartAnchorAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='start:'
			{
				newLeafNode(otherlv_2, grammarAccess.getStartAnchorAccess().getStartKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStartAnchorAccess().getPointPointDefinitionParserRuleCall_1_0());
				}
				lv_point_3_0=rulePointDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartAnchorRule());
					}
					set(
						$current,
						"point",
						lv_point_3_0,
						"org.xtuml.canvas.language.Canvas.PointDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStartAnchorAccess().getAnchorAnchorParserRuleCall_2_0());
				}
				lv_anchor_4_0=ruleAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartAnchorRule());
					}
					set(
						$current,
						"anchor",
						lv_anchor_4_0,
						"org.xtuml.canvas.language.Canvas.Anchor");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleEndAnchor
entryRuleEndAnchor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndAnchorRule()); }
	iv_ruleEndAnchor=ruleEndAnchor
	{ $current=$iv_ruleEndAnchor.current; }
	EOF;

// Rule EndAnchor
ruleEndAnchor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='end'
				{
					newLeafNode(otherlv_0, grammarAccess.getEndAnchorAccess().getEndKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getEndAnchorAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='end:'
			{
				newLeafNode(otherlv_2, grammarAccess.getEndAnchorAccess().getEndKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEndAnchorAccess().getPointPointDefinitionParserRuleCall_1_0());
				}
				lv_point_3_0=rulePointDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndAnchorRule());
					}
					set(
						$current,
						"point",
						lv_point_3_0,
						"org.xtuml.canvas.language.Canvas.PointDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEndAnchorAccess().getAnchorAnchorParserRuleCall_2_0());
				}
				lv_anchor_4_0=ruleAnchor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndAnchorRule());
					}
					set(
						$current,
						"anchor",
						lv_anchor_4_0,
						"org.xtuml.canvas.language.Canvas.Anchor");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAnchor
entryRuleAnchor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnchorRule()); }
	iv_ruleAnchor=ruleAnchor
	{ $current=$iv_ruleAnchor.current; }
	EOF;

// Rule Anchor
ruleAnchor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAnchorAccess().getShapeAnchorElementParserRuleCall_0());
		}
		this_ShapeAnchorElement_0=ruleShapeAnchorElement
		{
			$current = $this_ShapeAnchorElement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAnchorAccess().getConnectorAnchorElementParserRuleCall_1());
		}
		this_ConnectorAnchorElement_1=ruleConnectorAnchorElement
		{
			$current = $this_ConnectorAnchorElement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleShapeAnchorElement
entryRuleShapeAnchorElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeAnchorElementRule()); }
	iv_ruleShapeAnchorElement=ruleShapeAnchorElement
	{ $current=$iv_ruleShapeAnchorElement.current; }
	EOF;

// Rule ShapeAnchorElement
ruleShapeAnchorElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='shape'
				{
					newLeafNode(otherlv_0, grammarAccess.getShapeAnchorElementAccess().getShapeKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getShapeAnchorElementAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='shape:'
			{
				newLeafNode(otherlv_2, grammarAccess.getShapeAnchorElementAccess().getShapeKeyword_0_1());
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShapeAnchorElementRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getShapeAnchorElementAccess().getElementShapeCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConnectorAnchorElement
entryRuleConnectorAnchorElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorAnchorElementRule()); }
	iv_ruleConnectorAnchorElement=ruleConnectorAnchorElement
	{ $current=$iv_ruleConnectorAnchorElement.current; }
	EOF;

// Rule ConnectorAnchorElement
ruleConnectorAnchorElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='connector'
				{
					newLeafNode(otherlv_0, grammarAccess.getConnectorAnchorElementAccess().getConnectorKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getConnectorAnchorElementAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='connector:'
			{
				newLeafNode(otherlv_2, grammarAccess.getConnectorAnchorElementAccess().getConnectorKeyword_0_1());
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectorAnchorElementRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getConnectorAnchorElementAccess().getElementConnectorCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRulePolyline
entryRulePolyline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolylineRule()); }
	iv_rulePolyline=rulePolyline
	{ $current=$iv_rulePolyline.current; }
	EOF;

// Rule Polyline
rulePolyline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPolylineAccess().getPolylineAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='polyline'
				{
					newLeafNode(otherlv_1, grammarAccess.getPolylineAccess().getPolylineKeyword_1_0_0());
				}
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getPolylineAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='polyline:'
			{
				newLeafNode(otherlv_3, grammarAccess.getPolylineAccess().getPolylineKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPolylineAccess().getSegmentsSegmentParserRuleCall_2_0());
				}
				lv_segments_4_0=ruleSegment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolylineRule());
					}
					add(
						$current,
						"segments",
						lv_segments_4_0,
						"org.xtuml.canvas.language.Canvas.Segment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSegment
entryRuleSegment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSegmentRule()); }
	iv_ruleSegment=ruleSegment
	{ $current=$iv_ruleSegment.current; }
	EOF;

// Rule Segment
ruleSegment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='segment'
				{
					newLeafNode(otherlv_0, grammarAccess.getSegmentAccess().getSegmentKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getSegmentAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='segment:'
			{
				newLeafNode(otherlv_2, grammarAccess.getSegmentAccess().getSegmentKeyword_0_1());
			}
		)
		(
			(
				otherlv_3='start'
				{
					newLeafNode(otherlv_3, grammarAccess.getSegmentAccess().getStartKeyword_1_0_0());
				}
				otherlv_4=':'
				{
					newLeafNode(otherlv_4, grammarAccess.getSegmentAccess().getColonKeyword_1_0_1());
				}
			)
			    |
			otherlv_5='start:'
			{
				newLeafNode(otherlv_5, grammarAccess.getSegmentAccess().getStartKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSegmentAccess().getStartPointPointParserRuleCall_2_0());
				}
				lv_startPoint_6_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSegmentRule());
					}
					set(
						$current,
						"startPoint",
						lv_startPoint_6_0,
						"org.xtuml.canvas.language.Canvas.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_7='end'
				{
					newLeafNode(otherlv_7, grammarAccess.getSegmentAccess().getEndKeyword_3_0_0());
				}
				otherlv_8=':'
				{
					newLeafNode(otherlv_8, grammarAccess.getSegmentAccess().getColonKeyword_3_0_1());
				}
			)
			    |
			otherlv_9='end:'
			{
				newLeafNode(otherlv_9, grammarAccess.getSegmentAccess().getEndKeyword_3_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSegmentAccess().getEndPointPointParserRuleCall_4_0());
				}
				lv_endPoint_10_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSegmentRule());
					}
					set(
						$current,
						"endPoint",
						lv_endPoint_10_0,
						"org.xtuml.canvas.language.Canvas.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePoint
entryRulePoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointRule()); }
	iv_rulePoint=rulePoint
	{ $current=$iv_rulePoint.current; }
	EOF;

// Rule Point
rulePoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='x'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointAccess().getXKeyword_0());
		}
		(
			(
				lv_x_1_0=RULE_INT
				{
					newLeafNode(lv_x_1_0, grammarAccess.getPointAccess().getXINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='y'
		{
			newLeafNode(otherlv_2, grammarAccess.getPointAccess().getYKeyword_2());
		}
		(
			(
				lv_y_3_0=RULE_INT
				{
					newLeafNode(lv_y_3_0, grammarAccess.getPointAccess().getYINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRulePointDefinition
entryRulePointDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointDefinitionRule()); }
	iv_rulePointDefinition=rulePointDefinition
	{ $current=$iv_rulePointDefinition.current; }
	EOF;

// Rule PointDefinition
rulePointDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='point'
				{
					newLeafNode(otherlv_0, grammarAccess.getPointDefinitionAccess().getPointKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getPointDefinitionAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='point:'
			{
				newLeafNode(otherlv_2, grammarAccess.getPointDefinitionAccess().getPointKeyword_0_1());
			}
		)
		otherlv_3='x'
		{
			newLeafNode(otherlv_3, grammarAccess.getPointDefinitionAccess().getXKeyword_1());
		}
		(
			(
				lv_x_4_0=RULE_INT
				{
					newLeafNode(lv_x_4_0, grammarAccess.getPointDefinitionAccess().getXINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5='y'
		{
			newLeafNode(otherlv_5, grammarAccess.getPointDefinitionAccess().getYKeyword_3());
		}
		(
			(
				lv_y_6_0=RULE_INT
				{
					newLeafNode(lv_y_6_0, grammarAccess.getPointDefinitionAccess().getYINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_6_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleRectangle
entryRuleRectangle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRectangleRule()); }
	iv_ruleRectangle=ruleRectangle
	{ $current=$iv_ruleRectangle.current; }
	EOF;

// Rule Rectangle
ruleRectangle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='rectangle'
				{
					newLeafNode(otherlv_0, grammarAccess.getRectangleAccess().getRectangleKeyword_0_0_0());
				}
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getRectangleAccess().getColonKeyword_0_0_1());
				}
			)
			    |
			otherlv_2='rectangle:'
			{
				newLeafNode(otherlv_2, grammarAccess.getRectangleAccess().getRectangleKeyword_0_1());
			}
		)
		otherlv_3='x'
		{
			newLeafNode(otherlv_3, grammarAccess.getRectangleAccess().getXKeyword_1());
		}
		(
			(
				lv_x_4_0=RULE_INT
				{
					newLeafNode(lv_x_4_0, grammarAccess.getRectangleAccess().getXINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRectangleRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5='y'
		{
			newLeafNode(otherlv_5, grammarAccess.getRectangleAccess().getYKeyword_3());
		}
		(
			(
				lv_y_6_0=RULE_INT
				{
					newLeafNode(lv_y_6_0, grammarAccess.getRectangleAccess().getYINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRectangleRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_6_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_7='width'
		{
			newLeafNode(otherlv_7, grammarAccess.getRectangleAccess().getWidthKeyword_5());
		}
		(
			(
				lv_w_8_0=RULE_INT
				{
					newLeafNode(lv_w_8_0, grammarAccess.getRectangleAccess().getWINTTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRectangleRule());
					}
					setWithLastConsumed(
						$current,
						"w",
						lv_w_8_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_9='height'
		{
			newLeafNode(otherlv_9, grammarAccess.getRectangleAccess().getHeightKeyword_7());
		}
		(
			(
				lv_h_10_0=RULE_INT
				{
					newLeafNode(lv_h_10_0, grammarAccess.getRectangleAccess().getHINTTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRectangleRule());
					}
					setWithLastConsumed(
						$current,
						"h",
						lv_h_10_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
