/**
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.canvas.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtuml.canvas.language.canvas.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CanvasFactoryImpl extends EFactoryImpl implements CanvasFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CanvasFactory init()
  {
    try
    {
      CanvasFactory theCanvasFactory = (CanvasFactory)EPackage.Registry.INSTANCE.getEFactory(CanvasPackage.eNS_URI);
      if (theCanvasFactory != null)
      {
        return theCanvasFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CanvasFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CanvasFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CanvasPackage.MODEL: return createModel();
      case CanvasPackage.MODEL_RENDER: return createModelRender();
      case CanvasPackage.MODEL_PROPERTIES: return createModelProperties();
      case CanvasPackage.GRAPHICAL_ELEMENT: return createGraphicalElement();
      case CanvasPackage.SHAPES: return createShapes();
      case CanvasPackage.SHAPE: return createShape();
      case CanvasPackage.FLOATING_TEXTS: return createFloatingTexts();
      case CanvasPackage.FLOATING_TEXT: return createFloatingText();
      case CanvasPackage.ENUM_END: return createEnumEnd();
      case CanvasPackage.CONNECTORS: return createConnectors();
      case CanvasPackage.CONNECTOR: return createConnector();
      case CanvasPackage.ANCHORS: return createAnchors();
      case CanvasPackage.START_ANCHOR: return createStartAnchor();
      case CanvasPackage.END_ANCHOR: return createEndAnchor();
      case CanvasPackage.ANCHOR: return createAnchor();
      case CanvasPackage.SHAPE_ANCHOR_ELEMENT: return createShapeAnchorElement();
      case CanvasPackage.CONNECTOR_ANCHOR_ELEMENT: return createConnectorAnchorElement();
      case CanvasPackage.POLYLINE: return createPolyline();
      case CanvasPackage.SEGMENT: return createSegment();
      case CanvasPackage.POINT: return createPoint();
      case CanvasPackage.POINT_DEFINITION: return createPointDefinition();
      case CanvasPackage.BOUNDS: return createBounds();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelRender createModelRender()
  {
    ModelRenderImpl modelRender = new ModelRenderImpl();
    return modelRender;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelProperties createModelProperties()
  {
    ModelPropertiesImpl modelProperties = new ModelPropertiesImpl();
    return modelProperties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GraphicalElement createGraphicalElement()
  {
    GraphicalElementImpl graphicalElement = new GraphicalElementImpl();
    return graphicalElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Shapes createShapes()
  {
    ShapesImpl shapes = new ShapesImpl();
    return shapes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Shape createShape()
  {
    ShapeImpl shape = new ShapeImpl();
    return shape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FloatingTexts createFloatingTexts()
  {
    FloatingTextsImpl floatingTexts = new FloatingTextsImpl();
    return floatingTexts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FloatingText createFloatingText()
  {
    FloatingTextImpl floatingText = new FloatingTextImpl();
    return floatingText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumEnd createEnumEnd()
  {
    EnumEndImpl enumEnd = new EnumEndImpl();
    return enumEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connectors createConnectors()
  {
    ConnectorsImpl connectors = new ConnectorsImpl();
    return connectors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connector createConnector()
  {
    ConnectorImpl connector = new ConnectorImpl();
    return connector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Anchors createAnchors()
  {
    AnchorsImpl anchors = new AnchorsImpl();
    return anchors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartAnchor createStartAnchor()
  {
    StartAnchorImpl startAnchor = new StartAnchorImpl();
    return startAnchor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EndAnchor createEndAnchor()
  {
    EndAnchorImpl endAnchor = new EndAnchorImpl();
    return endAnchor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Anchor createAnchor()
  {
    AnchorImpl anchor = new AnchorImpl();
    return anchor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShapeAnchorElement createShapeAnchorElement()
  {
    ShapeAnchorElementImpl shapeAnchorElement = new ShapeAnchorElementImpl();
    return shapeAnchorElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConnectorAnchorElement createConnectorAnchorElement()
  {
    ConnectorAnchorElementImpl connectorAnchorElement = new ConnectorAnchorElementImpl();
    return connectorAnchorElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Polyline createPolyline()
  {
    PolylineImpl polyline = new PolylineImpl();
    return polyline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Segment createSegment()
  {
    SegmentImpl segment = new SegmentImpl();
    return segment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Point createPoint()
  {
    PointImpl point = new PointImpl();
    return point;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PointDefinition createPointDefinition()
  {
    PointDefinitionImpl pointDefinition = new PointDefinitionImpl();
    return pointDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bounds createBounds()
  {
    BoundsImpl bounds = new BoundsImpl();
    return bounds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CanvasPackage getCanvasPackage()
  {
    return (CanvasPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CanvasPackage getPackage()
  {
    return CanvasPackage.eINSTANCE;
  }

} //CanvasFactoryImpl
