/*
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.xtuml.canvas.language.canvas.Connector;
import org.xtuml.canvas.language.canvas.Shape;

import com.google.inject.Inject;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class CanvasScopeProvider extends AbstractCanvasScopeProvider {

	@Inject
	IResourceDescription.Manager descriptionManager;

	@Inject
	CanvasGlobalScopeProvider globalScopeProvider;

	@Override
	public IScope getScope(EObject context, EReference reference) {
//		if (context instanceof Shape && reference.getName().equals("represents")) {
//			return scopeShapeImports((Shape) context, reference);
//		} else if (context instanceof Connector && reference.getName().equals("represents")) {
//			return scopeConnectorImports((Connector) context, reference);
//		} else {
			return super.getScope(context, reference);
//		}
	}

//	private IScope scopeShapeImports(Shape context, EReference reference) {
//		globalScopeProvider.getImportedUris(context.eResource());
//		List<JvmType> result = new ArrayList<JvmType>();
//		ResourceSet set = context.eResource().getResourceSet();
//		String pkgName = context.eContainer().toString();
//		for (Resource resource : set.getResources()) {
//			IResourceDescription resourceDescription = descriptionManager.getResourceDescription(resource);
//			// load xtuml and produce scope
//			// adding java references to result
//		}
//		return new SimpleScope(result);
//	}
//
//	private IScope scopeConnectorImports(Connector context, EReference reference) {
//		globalScopeProvider.getImportedUris(context.eResource());
//		List<IEObjectDescription> result = new ArrayList<IEObjectDescription>();
//		ResourceSet set = context.eResource().getResourceSet();
//		String pkgName = context.getContainer().getName();
//		for (Resource resource : set.getResources()) {
//			IResourceDescription resourceDescription = descriptionManager.getResourceDescription(resource);
//			Iterable<IEObjectDescription> pkgs = resourceDescription
//					.getExportedObjectsByType(DomainmodelPackage.Literals.PACKAGE);
//			pkgs.forEach(pkg -> {
//				fmay.net.xtuml.domainmodel.Package mpkg = (Package) pkg.getEObjectOrProxy();
//				if (mpkg.getAssociations() != null && mpkg.getAssociations().getAssociations() != null) {
//					mpkg.getAssociations().getAssociations().forEach(massoc -> {
//						if (massoc.eContainer().eContainer() instanceof fmay.net.xtuml.domainmodel.Package) {
//							if (mpkg.getName().equals(pkgName)) {
//								result.add(EObjectDescription.create("R" + massoc.getName(), massoc));
//							}
//						}
//					});
//				}
//			});
//		}
//		return new SimpleScope(result);
//	}
}
