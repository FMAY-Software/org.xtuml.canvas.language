/*
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.scoping

import com.google.common.base.Splitter
import org.eclipse.xtext.resource.IResourceDescription
import com.google.inject.Inject
import org.eclipse.xtext.util.IResourceScopeCache
import org.eclipse.emf.ecore.resource.Resource
import com.google.inject.Provider
import java.util.LinkedHashSet
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.impl.ImportUriGlobalScopeProvider
import org.xtuml.canvas.language.canvas.CanvasPackage
import org.xtuml.canvas.language.XtumlImportStrategy
import org.eclipse.core.resources.ResourcesPlugin
import org.xtuml.bp.core.common.PersistenceManager
import org.eclipse.core.runtime.NullProgressMonitor
import org.xtuml.bp.core.common.PersistableModelComponent

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class CanvasGlobalScopeProvider extends ImportUriGlobalScopeProvider {
	static final Splitter SPLITTER = Splitter.on(',');

	@Inject
	IResourceDescription.Manager descriptionManager;

	@Inject
	IResourceScopeCache cache;

	override protected getImportedUris(Resource resource) {
		return cache.get(CanvasGlobalScopeProvider.getSimpleName(), resource, new Provider<LinkedHashSet<URI>>() {
			override get() {
				val uniqueImportURIs = collectImportUris(resource, new LinkedHashSet<URI>(5))

				val uriIter = uniqueImportURIs.iterator()
				while(uriIter.hasNext()) {
					if (!EcoreUtil2.isValidUri(resource, uriIter.next()))
						uriIter.remove()
				}
				return uniqueImportURIs
			}

			def LinkedHashSet<URI> collectImportUris(Resource resource, LinkedHashSet<URI> uniqueImportURIs) {
				val resourceDescription = descriptionManager.getResourceDescription(resource)
				val models = resourceDescription.getExportedObjectsByType(CanvasPackage.Literals.MODEL)
				
				models.forEach[
					val userData = getUserData(XtumlImportStrategy.IMPORTS)
					if(userData !== null) {
						// load xtuml
						val modelPath = ScopingUtils.getModelPath(userData);
						// initialize PMCs
//						PersistenceManager.defaultInstance;
//						val comp = PersistableModelComponent.findOrCreateInstance(ResourcesPlugin.workspace.root.findMember(modelPath).fullPath);
//						if(comp !== null) {
//							comp.loadComponentAndChildren(new NullProgressMonitor());
//						}
					}
				]
				
				return uniqueImportURIs
			}
		});
	}
}
