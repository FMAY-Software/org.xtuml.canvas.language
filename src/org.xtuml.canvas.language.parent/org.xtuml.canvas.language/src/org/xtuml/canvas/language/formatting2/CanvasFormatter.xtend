/*
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtuml.canvas.language.canvas.Model
import org.xtuml.canvas.language.canvas.ModelProperties
import org.xtuml.canvas.language.services.CanvasGrammarAccess
import org.xtuml.canvas.language.canvas.Shapes
import org.xtuml.canvas.language.canvas.Shape
import org.xtuml.canvas.language.canvas.GraphicalElement
import org.xtuml.canvas.language.canvas.SemanticModel
import org.xtuml.canvas.language.canvas.Connectors
import org.xtuml.canvas.language.canvas.Connector
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion

class CanvasFormatter extends AbstractFormatter2 {
	
	@Inject extension CanvasGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		model.regionFor.keyword('render:').prepend[newLines = 2]
		model.allRegionsFor.keywords('properties:', 'shapes:', 'shape:', 'connectors:','connector:').forEach[prepend[newLines = 1]]
	}

	def dispatch void format(SemanticModel sm) {
		
	}
	
	// TODO: implement for Shapes, Shape, FloatingTexts, FloatingText, ShapeProps, Connectors, Connector, Anchors, StartAnchor, EndAnchor, ConnectorProps, Polyline, Segment
	def dispatch void format(Shapes shapes, extension IFormattableDocument document) {
		for (shape : shapes.shapes) {
			shape.format
		}
	}
	
	def dispatch void format(Shape shape, extension IFormattableDocument document) {
		shape.regionFor.keyword('shape:').prepend[newLines = 2];
	}

	def dispatch void format(Connectors connectors) {
		for (connector: connectors.connectors) {
			connector.format
		}
	}
	
	def dispatch void format(Connector connector) {
		
	}
}
