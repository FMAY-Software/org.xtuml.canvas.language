/*
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtuml.canvas.language.canvas.Model
import org.xtuml.canvas.language.canvas.ModelProperties
import org.xtuml.canvas.language.services.CanvasGrammarAccess
import org.xtuml.canvas.language.canvas.Shapes
import org.xtuml.canvas.language.canvas.Shape
import org.xtuml.canvas.language.canvas.GraphicalElement
import org.xtuml.canvas.language.canvas.SemanticModel

class CanvasFormatter extends AbstractFormatter2 {
	
	@Inject extension CanvasGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (semanticModel : model.semantics) {
			semanticModel.format
			semanticModel.append[setNewLines(2)]
		}
		model.properties.format
		for (graphicalElement : model.elements) {
			graphicalElement.format
			graphicalElement.append[setNewLines(1)]
		}
		model.allSemanticRegions.forEach[append[setNewLines(2)]]
	}

	def dispatch void format(ModelProperties modelProperties, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		modelProperties.point.format
	}
	
	def dispatch void format(GraphicalElement element) {
		
	}
	
	def dispatch void format(SemanticModel sm) {
		
	}
	
	// TODO: implement for Shapes, Shape, FloatingTexts, FloatingText, ShapeProps, Connectors, Connector, Anchors, StartAnchor, EndAnchor, ConnectorProps, Polyline, Segment
	def dispatch void format(Shapes shapes) {
		for (shape : shapes.shapes) {
			shape.format
		}
	}
	
	def dispatch void format(Shape shape) {

	}
}
