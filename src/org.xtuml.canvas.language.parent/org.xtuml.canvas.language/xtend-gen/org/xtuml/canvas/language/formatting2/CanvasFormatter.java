/**
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtuml.canvas.language.canvas.Connector;
import org.xtuml.canvas.language.canvas.Connectors;
import org.xtuml.canvas.language.canvas.Model;
import org.xtuml.canvas.language.canvas.SemanticModel;
import org.xtuml.canvas.language.canvas.Shape;
import org.xtuml.canvas.language.canvas.Shapes;
import org.xtuml.canvas.language.services.CanvasGrammarAccess;

@SuppressWarnings("all")
public class CanvasFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CanvasGrammarAccess _canvasGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.prepend(this.textRegionExtensions.regionFor(model).keyword("render:"), _function);
    final Consumer<ISemanticRegion> _function_1 = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it_1) -> {
        it_1.setNewLines(1);
      };
      document.prepend(it, _function_2);
    };
    this.textRegionExtensions.allRegionsFor(model).keywords("properties:", "shapes:", "shape:", "connectors:", "connector:").forEach(_function_1);
  }
  
  protected void _format(final SemanticModel sm) {
  }
  
  protected void _format(final Shapes shapes, @Extension final IFormattableDocument document) {
    EList<Shape> _shapes = shapes.getShapes();
    for (final Shape shape : _shapes) {
      this.format(shape);
    }
  }
  
  protected void _format(final Shape shape, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.prepend(this.textRegionExtensions.regionFor(shape).keyword("shape:"), _function);
  }
  
  protected void _format(final Connectors connectors) {
    EList<Connector> _connectors = connectors.getConnectors();
    for (final Connector connector : _connectors) {
      this.format(connector);
    }
  }
  
  protected void _format(final Connector connector) {
  }
  
  public void format(final Object shapes, final IFormattableDocument document) {
    if (shapes instanceof XtextResource) {
      _format((XtextResource)shapes, document);
      return;
    } else if (shapes instanceof Shapes) {
      _format((Shapes)shapes, document);
      return;
    } else if (shapes instanceof Model) {
      _format((Model)shapes, document);
      return;
    } else if (shapes instanceof Shape) {
      _format((Shape)shapes, document);
      return;
    } else if (shapes instanceof EObject) {
      _format((EObject)shapes, document);
      return;
    } else if (shapes == null) {
      _format((Void)null, document);
      return;
    } else if (shapes != null) {
      _format(shapes, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(shapes, document).toString());
    }
  }
  
  public void format(final EObject connectors) {
    if (connectors instanceof Connectors) {
      _format((Connectors)connectors);
      return;
    } else if (connectors instanceof Connector) {
      _format((Connector)connectors);
      return;
    } else if (connectors instanceof SemanticModel) {
      _format((SemanticModel)connectors);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(connectors).toString());
    }
  }
}
