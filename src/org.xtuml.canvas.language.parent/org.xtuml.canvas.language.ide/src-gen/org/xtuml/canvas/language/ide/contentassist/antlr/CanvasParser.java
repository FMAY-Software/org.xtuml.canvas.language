/*
 * generated by Xtext 2.22.0
 */
package org.xtuml.canvas.language.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtuml.canvas.language.ide.contentassist.antlr.internal.InternalCanvasParser;
import org.xtuml.canvas.language.services.CanvasGrammarAccess;

public class CanvasParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CanvasGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CanvasGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives_1(), "rule__Model__Alternatives_1");
			builder.put(grammarAccess.getModelPropertiesAccess().getAlternatives_0(), "rule__ModelProperties__Alternatives_0");
			builder.put(grammarAccess.getModelPropertiesAccess().getAlternatives_1(), "rule__ModelProperties__Alternatives_1");
			builder.put(grammarAccess.getGraphicalElementAccess().getAlternatives(), "rule__GraphicalElement__Alternatives");
			builder.put(grammarAccess.getShapesAccess().getAlternatives_1(), "rule__Shapes__Alternatives_1");
			builder.put(grammarAccess.getShapeAccess().getAlternatives_1(), "rule__Shape__Alternatives_1");
			builder.put(grammarAccess.getShapeAccess().getAlternatives_5(), "rule__Shape__Alternatives_5");
			builder.put(grammarAccess.getFloatingTextsAccess().getAlternatives_1(), "rule__FloatingTexts__Alternatives_1");
			builder.put(grammarAccess.getFloatingTextAccess().getAlternatives_1(), "rule__FloatingText__Alternatives_1");
			builder.put(grammarAccess.getFloatingTextAccess().getAssociatedAlternatives_3_0(), "rule__FloatingText__AssociatedAlternatives_3_0");
			builder.put(grammarAccess.getShapePropsAccess().getAlternatives_1(), "rule__ShapeProps__Alternatives_1");
			builder.put(grammarAccess.getContainerAccess().getAlternatives_2(), "rule__Container__Alternatives_2");
			builder.put(grammarAccess.getConnectorsAccess().getAlternatives_1(), "rule__Connectors__Alternatives_1");
			builder.put(grammarAccess.getConnectorAccess().getAlternatives_0(), "rule__Connector__Alternatives_0");
			builder.put(grammarAccess.getConnectorAccess().getAlternatives_5(), "rule__Connector__Alternatives_5");
			builder.put(grammarAccess.getAnchorsAccess().getAlternatives_0(), "rule__Anchors__Alternatives_0");
			builder.put(grammarAccess.getStartAnchorAccess().getAlternatives_0(), "rule__StartAnchor__Alternatives_0");
			builder.put(grammarAccess.getEndAnchorAccess().getAlternatives_0(), "rule__EndAnchor__Alternatives_0");
			builder.put(grammarAccess.getAnchorAccess().getAlternatives(), "rule__Anchor__Alternatives");
			builder.put(grammarAccess.getShapeAnchorElementAccess().getAlternatives_0(), "rule__ShapeAnchorElement__Alternatives_0");
			builder.put(grammarAccess.getConnectorAnchorElementAccess().getAlternatives_0(), "rule__ConnectorAnchorElement__Alternatives_0");
			builder.put(grammarAccess.getConnectorPropsAccess().getAlternatives_1(), "rule__ConnectorProps__Alternatives_1");
			builder.put(grammarAccess.getPolylineAccess().getAlternatives_1(), "rule__Polyline__Alternatives_1");
			builder.put(grammarAccess.getSegmentAccess().getAlternatives_0(), "rule__Segment__Alternatives_0");
			builder.put(grammarAccess.getRectangleAccess().getAlternatives_0(), "rule__Rectangle__Alternatives_0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getModelAccess().getGroup_1_0(), "rule__Model__Group_1_0__0");
			builder.put(grammarAccess.getSemanticModelAccess().getGroup(), "rule__SemanticModel__Group__0");
			builder.put(grammarAccess.getModelPropertiesAccess().getGroup(), "rule__ModelProperties__Group__0");
			builder.put(grammarAccess.getModelPropertiesAccess().getGroup_0_0(), "rule__ModelProperties__Group_0_0__0");
			builder.put(grammarAccess.getModelPropertiesAccess().getGroup_1_0(), "rule__ModelProperties__Group_1_0__0");
			builder.put(grammarAccess.getShapesAccess().getGroup(), "rule__Shapes__Group__0");
			builder.put(grammarAccess.getShapesAccess().getGroup_1_0(), "rule__Shapes__Group_1_0__0");
			builder.put(grammarAccess.getShapeAccess().getGroup(), "rule__Shape__Group__0");
			builder.put(grammarAccess.getShapeAccess().getGroup_1_0(), "rule__Shape__Group_1_0__0");
			builder.put(grammarAccess.getShapeAccess().getGroup_5_0(), "rule__Shape__Group_5_0__0");
			builder.put(grammarAccess.getFloatingTextsAccess().getGroup(), "rule__FloatingTexts__Group__0");
			builder.put(grammarAccess.getFloatingTextsAccess().getGroup_1_0(), "rule__FloatingTexts__Group_1_0__0");
			builder.put(grammarAccess.getFloatingTextAccess().getGroup(), "rule__FloatingText__Group__0");
			builder.put(grammarAccess.getFloatingTextAccess().getGroup_1_0(), "rule__FloatingText__Group_1_0__0");
			builder.put(grammarAccess.getShapePropsAccess().getGroup(), "rule__ShapeProps__Group__0");
			builder.put(grammarAccess.getShapePropsAccess().getGroup_1_0(), "rule__ShapeProps__Group_1_0__0");
			builder.put(grammarAccess.getContainerAccess().getGroup(), "rule__Container__Group__0");
			builder.put(grammarAccess.getColorAccess().getGroup(), "rule__Color__Group__0");
			builder.put(grammarAccess.getConnectorsAccess().getGroup(), "rule__Connectors__Group__0");
			builder.put(grammarAccess.getConnectorsAccess().getGroup_1_0(), "rule__Connectors__Group_1_0__0");
			builder.put(grammarAccess.getConnectorAccess().getGroup(), "rule__Connector__Group__0");
			builder.put(grammarAccess.getConnectorAccess().getGroup_0_0(), "rule__Connector__Group_0_0__0");
			builder.put(grammarAccess.getConnectorAccess().getGroup_5_0(), "rule__Connector__Group_5_0__0");
			builder.put(grammarAccess.getAnchorsAccess().getGroup(), "rule__Anchors__Group__0");
			builder.put(grammarAccess.getAnchorsAccess().getGroup_0_0(), "rule__Anchors__Group_0_0__0");
			builder.put(grammarAccess.getStartAnchorAccess().getGroup(), "rule__StartAnchor__Group__0");
			builder.put(grammarAccess.getStartAnchorAccess().getGroup_0_0(), "rule__StartAnchor__Group_0_0__0");
			builder.put(grammarAccess.getEndAnchorAccess().getGroup(), "rule__EndAnchor__Group__0");
			builder.put(grammarAccess.getEndAnchorAccess().getGroup_0_0(), "rule__EndAnchor__Group_0_0__0");
			builder.put(grammarAccess.getShapeAnchorElementAccess().getGroup(), "rule__ShapeAnchorElement__Group__0");
			builder.put(grammarAccess.getShapeAnchorElementAccess().getGroup_0_0(), "rule__ShapeAnchorElement__Group_0_0__0");
			builder.put(grammarAccess.getConnectorAnchorElementAccess().getGroup(), "rule__ConnectorAnchorElement__Group__0");
			builder.put(grammarAccess.getConnectorAnchorElementAccess().getGroup_0_0(), "rule__ConnectorAnchorElement__Group_0_0__0");
			builder.put(grammarAccess.getConnectorPropsAccess().getGroup(), "rule__ConnectorProps__Group__0");
			builder.put(grammarAccess.getConnectorPropsAccess().getGroup_1_0(), "rule__ConnectorProps__Group_1_0__0");
			builder.put(grammarAccess.getPolylineAccess().getGroup(), "rule__Polyline__Group__0");
			builder.put(grammarAccess.getPolylineAccess().getGroup_1_0(), "rule__Polyline__Group_1_0__0");
			builder.put(grammarAccess.getSegmentAccess().getGroup(), "rule__Segment__Group__0");
			builder.put(grammarAccess.getSegmentAccess().getGroup_0_0(), "rule__Segment__Group_0_0__0");
			builder.put(grammarAccess.getPointAccess().getGroup(), "rule__Point__Group__0");
			builder.put(grammarAccess.getRectangleAccess().getGroup(), "rule__Rectangle__Group__0");
			builder.put(grammarAccess.getRectangleAccess().getGroup_0_0(), "rule__Rectangle__Group_0_0__0");
			builder.put(grammarAccess.getModelAccess().getSemanticsAssignment_0(), "rule__Model__SemanticsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getRepresentsAssignment_2(), "rule__Model__RepresentsAssignment_2");
			builder.put(grammarAccess.getModelAccess().getPropertiesAssignment_3(), "rule__Model__PropertiesAssignment_3");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment_4(), "rule__Model__ElementsAssignment_4");
			builder.put(grammarAccess.getSemanticModelAccess().getImportURIAssignment_1(), "rule__SemanticModel__ImportURIAssignment_1");
			builder.put(grammarAccess.getModelPropertiesAccess().getPointAssignment_2(), "rule__ModelProperties__PointAssignment_2");
			builder.put(grammarAccess.getModelPropertiesAccess().getZoomAssignment_4(), "rule__ModelProperties__ZoomAssignment_4");
			builder.put(grammarAccess.getShapesAccess().getShapesAssignment_2(), "rule__Shapes__ShapesAssignment_2");
			builder.put(grammarAccess.getShapeAccess().getNameAssignment_2(), "rule__Shape__NameAssignment_2");
			builder.put(grammarAccess.getShapeAccess().getPropsAssignment_3(), "rule__Shape__PropsAssignment_3");
			builder.put(grammarAccess.getShapeAccess().getRectAssignment_4(), "rule__Shape__RectAssignment_4");
			builder.put(grammarAccess.getShapeAccess().getRepresentsAssignment_6(), "rule__Shape__RepresentsAssignment_6");
			builder.put(grammarAccess.getFloatingTextsAccess().getTextsAssignment_2(), "rule__FloatingTexts__TextsAssignment_2");
			builder.put(grammarAccess.getFloatingTextAccess().getRectAssignment_2(), "rule__FloatingText__RectAssignment_2");
			builder.put(grammarAccess.getFloatingTextAccess().getAssociatedAssignment_3(), "rule__FloatingText__AssociatedAssignment_3");
			builder.put(grammarAccess.getShapePropsAccess().getContainerAssignment_2(), "rule__ShapeProps__ContainerAssignment_2");
			builder.put(grammarAccess.getShapePropsAccess().getColorAssignment_3(), "rule__ShapeProps__ColorAssignment_3");
			builder.put(grammarAccess.getColorAccess().getRAssignment_1(), "rule__Color__RAssignment_1");
			builder.put(grammarAccess.getColorAccess().getGAssignment_2(), "rule__Color__GAssignment_2");
			builder.put(grammarAccess.getColorAccess().getBAssignment_3(), "rule__Color__BAssignment_3");
			builder.put(grammarAccess.getConnectorsAccess().getConnectorsAssignment_2(), "rule__Connectors__ConnectorsAssignment_2");
			builder.put(grammarAccess.getConnectorAccess().getNameAssignment_1(), "rule__Connector__NameAssignment_1");
			builder.put(grammarAccess.getConnectorAccess().getPropsAssignment_2(), "rule__Connector__PropsAssignment_2");
			builder.put(grammarAccess.getConnectorAccess().getPolylineAssignment_3(), "rule__Connector__PolylineAssignment_3");
			builder.put(grammarAccess.getConnectorAccess().getAnchorsAssignment_4(), "rule__Connector__AnchorsAssignment_4");
			builder.put(grammarAccess.getConnectorAccess().getRepresentsAssignment_6(), "rule__Connector__RepresentsAssignment_6");
			builder.put(grammarAccess.getAnchorsAccess().getStartAnchorAssignment_1(), "rule__Anchors__StartAnchorAssignment_1");
			builder.put(grammarAccess.getAnchorsAccess().getEndAnchorAssignment_2(), "rule__Anchors__EndAnchorAssignment_2");
			builder.put(grammarAccess.getStartAnchorAccess().getPointAssignment_1(), "rule__StartAnchor__PointAssignment_1");
			builder.put(grammarAccess.getStartAnchorAccess().getAnchorAssignment_2(), "rule__StartAnchor__AnchorAssignment_2");
			builder.put(grammarAccess.getEndAnchorAccess().getPointAssignment_1(), "rule__EndAnchor__PointAssignment_1");
			builder.put(grammarAccess.getEndAnchorAccess().getAnchorAssignment_2(), "rule__EndAnchor__AnchorAssignment_2");
			builder.put(grammarAccess.getShapeAnchorElementAccess().getElementAssignment_1(), "rule__ShapeAnchorElement__ElementAssignment_1");
			builder.put(grammarAccess.getConnectorAnchorElementAccess().getElementAssignment_1(), "rule__ConnectorAnchorElement__ElementAssignment_1");
			builder.put(grammarAccess.getConnectorPropsAccess().getColorAssignment_2(), "rule__ConnectorProps__ColorAssignment_2");
			builder.put(grammarAccess.getPolylineAccess().getSegmentsAssignment_2(), "rule__Polyline__SegmentsAssignment_2");
			builder.put(grammarAccess.getSegmentAccess().getStartPointAssignment_1(), "rule__Segment__StartPointAssignment_1");
			builder.put(grammarAccess.getSegmentAccess().getEndPointAssignment_3(), "rule__Segment__EndPointAssignment_3");
			builder.put(grammarAccess.getPointAccess().getXAssignment_1(), "rule__Point__XAssignment_1");
			builder.put(grammarAccess.getPointAccess().getYAssignment_3(), "rule__Point__YAssignment_3");
			builder.put(grammarAccess.getRectangleAccess().getXAssignment_2(), "rule__Rectangle__XAssignment_2");
			builder.put(grammarAccess.getRectangleAccess().getYAssignment_4(), "rule__Rectangle__YAssignment_4");
			builder.put(grammarAccess.getRectangleAccess().getWAssignment_6(), "rule__Rectangle__WAssignment_6");
			builder.put(grammarAccess.getRectangleAccess().getHAssignment_8(), "rule__Rectangle__HAssignment_8");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CanvasGrammarAccess grammarAccess;

	@Override
	protected InternalCanvasParser createParser() {
		InternalCanvasParser result = new InternalCanvasParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CanvasGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CanvasGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
